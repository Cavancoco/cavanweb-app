import * as React from 'react';
export interface FlexibleProps {
	[key: string]: any
}

/**
 * 
 * Represents an event on a calendar view.
 * 
 */
declare class Calendar_Event extends React.Component<Calendar_EventProps, any> { }
export interface Calendar_EventProps extends FlexibleProps {

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The default title to use when one is not specified.
	 * 
	 */
	defaultTitle?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * The end date for this event (as UTC). Will be set automatically if
	 * a model is passed. May be set independently
	 * of any attached model.
	 * 
	 */
	endDate?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * The display mode for this event. Possible options are:
	 * - `weekspan`
	 * - `weekinline`
	 * - `day`
	 * 
	 */
	mode?: string

	/**
	 * A backing model for this widget.
	 * 
	 */
	model?: any

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * A color palette for this event.
	 * 
	 */
	palette?: any

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * `true` to allow this event to be resized via the UI.
	 * 
	 */
	resize?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * The start date for this event (as UTC). Will be set automatically if
	 * a model is passed. May be set independently
	 * of any attached model.
	 * 
	 */
	startDate?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * A display format for the time.
	 * 
	 */
	timeFormat?: string

	/**
	 * The title for this event. Will be set automatically if
	 * a model is passed.
	 * 
	 */
	title?: string

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The view for this event.
	 * 
	 */
	view?: any

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * An add form implementation for data used with Ext.calendar.model.Event.
 * 
 */
declare class Calendar_Form_Add extends React.Component<Calendar_Form_AddProps, any> { }
export interface Calendar_Form_AddProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The config for the all day field.
	 * 
	 */
	allDayField?: any

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * If specified, load and submit actions will be loaded and submitted via Ext Direct.  Methods which have been imported by
	 * Ext.direct.Manager can be specified here to load and submit forms. API methods may also be
	 * specified as strings and will be parsed into the actual functions when the first submit or load has occurred. Such as the following:
	 * 
	 *      api: {
	 *          load: App.ss.MyProfile.load,
	 *          submit: App.ss.MyProfile.submit
	 *      }
	 * 
	 *      api: {
	 *          load: 'App.ss.MyProfile.load',
	 *          submit: 'App.ss.MyProfile.submit'
	 *      }
	 * 
	 * You can also use a prefix instead of fully qualified function names:
	 * 
	 *      api: {
	 *          prefix: 'App.ss.MyProfile',
	 *          load: 'load',
	 *          submit: 'submit'
	 *      }
	 * 
	 * Load actions can use paramOrder or paramsAsHash to customize how the load method
	 * is invoked.  Submit actions will always use a standard form submit. The `formHandler` configuration
	 * (see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has
	 * been imported by Ext.direct.Manager.
	 * 
	 */
	api?: any

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * Optional hash of params to be sent (when `standardSubmit` configuration is `false`) on every submit.
	 * 
	 */
	baseParams?: any

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * The config for the calendar field.
	 * 
	 */
	calendarField?: any

	/**
	 * The config for the cancel button.
	 * 
	 */
	cancelButton?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The default start time for events. Should be in the
	 * format `[hour, minute]`.
	 * 
	 */
	defaultEndTime?: number[]

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default start time for events. Should be in the
	 * format `[hour, minute]`.
	 * 
	 */
	defaultStartTime?: number[]

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * The config for the description field.
	 * 
	 */
	descriptionField?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * The config for the drop button. `null` to not show this button.
	 * 
	 */
	dropButton?: any

	/**
	 * The submission form is generated but never added to the dom. It is a submittable
	 * version of your form panel, allowing for fields that are not simple text-fields
	 * to be properly submitted to servers. It will also send values that are easier to parse
	 * with server side code.
	 * 
	 * If this is false we will attempt to subject the raw form inside the form panel.
	 * 
	 */
	enableSubmissionForm?: boolean

	/**
	 * The enctype attribute for the form, specifies how the form should be encoded when submitting
	 * 
	 */
	enctype?: string

	/**
	 * The config for the end date field.
	 * 
	 */
	endDateField?: any

	/**
	 * The config for the end time field.
	 * 
	 */
	endTimeField?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The method which this form will be submitted. `post` or `get`.
	 * 
	 */
	method?: string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * If this is enabled the form will automatically detect the need to use
	 * 'multipart/form-data' during submission.
	 * 
	 */
	multipartDetection?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * Forms can be assigned names to be used in parent forms.
	 * 
	 */
	nameable?: any

	nameHolder?: any

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * A list of params to be executed server side. Only used for the api `load`
	 * configuration.
	 * 
	 * Specify the params in the order in which they must be executed on the
	 * server-side as either (1) an Array of String values, or (2) a String of params
	 * delimited by either whitespace, comma, or pipe. For example,
	 * any of the following would be acceptable:
	 * 
	 *     paramOrder: ['param1','param2','param3']
	 *     paramOrder: 'param1 param2 param3'
	 *     paramOrder: 'param1,param2,param3'
	 *     paramOrder: 'param1|param2|param'
	 * 
	 */
	paramOrder?: string | string[]

	/**
	 * Only used for the api `load` configuration. If true, parameters will be sent as a
	 * single hash collection of named arguments. Providing a paramOrder nullifies this
	 * configuration.
	 * 
	 */
	paramsAsHash?: boolean

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * The model instance of this form. Can by dynamically set at any time.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * The config for the save button.
	 * 
	 */
	saveButton?: any

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Forms can be assigned the same name as other forms in their parent form. This
	 * means that if a form is assigned a `name` it will be returned as an array from
	 * `lookupName` in its parent form.
	 * 
	 */
	shareableName?: any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Whether or not we want to perform a standard form submit.
	 * 
	 */
	standardSubmit?: boolean

	/**
	 * The config for the start date field.
	 * 
	 */
	startDateField?: any

	/**
	 * The config for the start time field.
	 * 
	 */
	startTimeField?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * When this is set to `true`, the form will automatically submit itself whenever the `action`
	 * event fires on a field in this form. The action event usually fires whenever you press
	 * go or enter inside a textfield.
	 * 
	 */
	submitOnAction?: any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * Timeout for form actions in seconds.
	 * 
	 */
	timeout?: number

	/**
	 * The title for the dialog.
	 * 
	 */
	title?: string

	/**
	 * The config for the title field.
	 * 
	 */
	titleField?: any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * If set to true, reset() resets to the last loaded or setValues() data instead of
	 * when the form was first created.
	 * 
	 */
	trackResetOnLoad?: boolean

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * The default url for submit actions.
	 * 
	 */
	url?: string

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * Fires immediately preceding any Form submit action.
	 * Implementations may adjust submitted form values or options prior to execution.
	 * A return value of `false` from this listener will abort the submission
	 * attempt (regardless of `standardSubmit` configuration).
	 * 
	 */
	onBeforeSubmit?: (me: any, values: any, options: any, e: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when either the Ajax HTTP request reports a failure OR the server returns a `success:false`
	 * response in the result payload.
	 * 
	 */
	onException?: (me: any, result: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * Fires upon successful (Ajax-based) form submission.
	 * 
	 */
	onSubmit?: (me: any, result: any, e: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * A calendar picker component.  Similar to Ext.calendar.List, the items in the
 * picker will display the title for each source calendar along with a color swatch
 * representing the default color the that calendar's events.
 * 
 * The cfg-store will be the same Ext.calendar.store.Calendars
 * instance used by your target Ext.calendar.view.Base.
 * 
 */
declare class Calendar_Calendar_Picker extends React.Component<Calendar_Calendar_PickerProps, any> { }
export interface Calendar_Calendar_PickerProps extends FlexibleProps {

	/**
	 * The template used to format the Array of error messages passed to setActiveErrors into a single HTML
	 * string. if the msgTarget is title, it defaults to a list separated by new lines. Otherwise, it
	 * renders each message as an item in an unordered list.
	 * 
	 */
	activeErrorsTpl?: string | string[] | any

	/**
	 * Specify `false` to not accept blank values
	 * 
	 */
	allowBlank?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * True to set the field's DOM element auto=capitalize attribute to "on", false to set to "off".
	 * 
	 */
	autoCapitalize?: boolean

	/**
	 * Autocomplete is disabled on Picker fields by default.
	 * 
	 */
	autoComplete?: boolean

	/**
	 * True to set the field DOM element auto-correct attribute to "on", false to set to "off".
	 * 
	 */
	autoCorrect?: boolean

	/**
	 * Whether to adjust the component's body width to make room for messages.
	 * 
	 */
	autoFitErrors?: boolean

	/**
	 * This option controls whether to *initially* load the store when a value is set so that
	 * the display value can be determined from the appropriate record.
	 * The store will only be loaded in a limited set of circumstances:
	 * - The store is not currently loading.
	 * - The store does not have a pending Ext.data.Store#autoLoad.
	 * - The store has not been loaded before.
	 * 
	 */
	autoLoadOnValue?: boolean

	/**
	 * `true` to auto select the first value in the store or options when they are changed. Only happens when
	 * the value is set to `null`.
	 * 
	 */
	autoSelect?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * The error text to display if the **allowBlank** validation fails.
	 * 
	 */
	blankText?: string

	/**
	 * 
	 * The horizontal alignment of this field's component within the body
	 * of the field
	 * 
	 */
	bodyAlign?: string

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	clearIcon?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * The config object to factory the Component that this Decorator wraps around.
	 * 
	 */
	component?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * 
	 * `true` to disable the field.
	 * 
	 * Be aware that conformant with the [HTML specification](http://www.w3.org/TR/html401/interact/forms.html),
	 * disabled Fields will not be submitted.
	 * 
	 */
	disabled?: boolean

	/**
	 * The underlying name to bind to this
	 * Select control.  If configured as `null`, the cfg!valueField is used.
	 * 
	 * This resolved value is the visibly rendered value of the available selection options.
	 * 
	 */
	displayField?: string | number

	/**
	 * The template to be used to display the selected record inside the text field.
	 * 
	 * If not specified, the cfg!displayField is shown in the text field.
	 * 
	 */
	displayTpl?: Function | string | string[]

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * A configuration object, containing an cfg#xtype property which specifies the widget to
	 * create if `cfg!picker: 'edge'` (or if it's '`auto'` and the app is on a phone)
	 * 
	 */
	edgePicker?: string | any

	/**
	 * Configure as `false` to prevent the user from typing text directly into the field;
	 * the field can only have its value set programmatically or via an action invoked by a trigger.
	 * 
	 * Contrast with cfg!readOnly which disables all mutation via the UI.
	 * 
	 */
	editable?: boolean

	/**
	 * A configuration object, containing an cfg#xtype property which specifies the widget to
	 * create if `cfg!picker: 'floated'` (or if it's '`auto'` and the app is *not* on a phone)
	 * 
	 */
	floatedPicker?: string | any

	/**
	 * *Only valud when the cfg!floatedPicker is used.
	 * The Ext.Component#method!showBy alignment string to use when showing
	 * the floated picker by the input field.
	 * 
	 */
	floatedPickerAlign?: string

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * By default the value must always be the cfg!valueField of one of the records in the store.
	 * Configure as `false` to allow the value to be set to arbitrary text, and have this component
	 * auto create an associated record with the typed value as the cfg!valueField.
	 * 
	 */
	forceSelection?: boolean

	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Specify a `hiddenName` if you're using the standardSubmit option.
	 * This name will be used to post the underlying value of the select to the server.
	 * 
	 */
	hiddenName?: string

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * CSS class to add to the input element of this field
	 * 
	 */
	inputCls?: string

	/**
	 * 
	 * The type attribute for input fields -- e.g. text, password, date, url, email, etc.
	 * 
	 */
	inputType?: string

	/**
	 * An XTemplate definition string (Or an Ext.XTemplate) which specifies how to display a list
	 * item from a record values object. This is automatically generated to display the cfg!displayField
	 * if not specified.
	 * 
	 */
	itemTpl?: Function | string | string[]

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The label of this field
	 * 
	 */
	label?: string

	/**
	 * When value is `'placeholder'`, the label text will be rendered as placeholder
	 * text inside the empty input and will animated to "top" alignment when the input
	 * is focused or contains text.
	 * 
	 * The position to render the label relative to the field input.
	 * 
	 */
	labelAlign?: string

	/**
	 * Optional CSS class to add to the Label element.
	 * 
	 */
	labelCls?: string

	/**
	 * 
	 * Text alignment of this field's label
	 * 
	 */
	labelTextAlign?: string

	/**
	 * The width to make this field's label.
	 * 
	 */
	labelWidth?: number | string

	/**
	 * 
	 * `true` to allow the label to wrap. If set to `false`, the label will be truncated with
	 * an ellipsis.
	 * 
	 */
	labelWrap?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * *Only valid when the `cfg!picker: 'floated'` is used.
	 * Whether the cfg!floatedPicker's width should be explicitly set to
	 * match the width of the input element.
	 * 
	 */
	matchFieldWidth?: boolean

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum number of permitted input characters.
	 * 
	 */
	maxLength?: number

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * [msgTarget="qtip"]
	 * 
	 * The location where the error message text should display.  Must be one of the
	 * following values:
	 * 
	 * * qtip Display a quick tip containing the message when the user hovers (or taps) the field.  This is the default.
	 *   Ext.tip.Manager#init must have been called for this setting to work.
	 * * title Display the message in a default browser title attribute popup
	 * * under Add a block div beneath the field containing the error message.
	 * * side Add an error icon to the right of the field, displaying the message in a popup on hover or tap
	 * * none Don't display any error message.  This might be useful if you are implementing custom error display.
	 * [element id] Add the error message to the innerHTML of the specified element
	 * 
	 */
	msgTarget?: string

	/**
	 * 
	 * The field's HTML name attribute.
	 * 
	 * __Note:__ this property must be set if this field is to be automatically included with.
	 * submit().
	 * 
	 */
	name?: string

	/**
	 * An array of select options.
	 * 
	 *     [
	 *         {text: 'First Option',  value: 'first'},
	 *         {text: 'Second Option', value: 'second'},
	 *         {text: 'Third Option',  value: 'third'}
	 *     ]
	 * 
	 * __Note:__ Option object member names should correspond with defined valueField and displayField values.
	 * This config will be ignored if a store instance is provided.
	 * 
	 */
	options?: any[]

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * The value for the HTML5 `pattern` attribute.
	 * You can use this to change which keyboard layout will be used.
	 * 
	 * Even though it extends Ext.field.Text, it will display the number keyboard.
	 * 
	 */
	pattern?: string

	/**
	 * 
	 * A string representing the type of picker to use.  Can be one of the following values.
	 * 
	 * - `'edge'` to use the edgePicker, generally used on small formfactor devices.
	 * - `'floated'` to use the floatedPicker, generally used on tablets or desktops.
	 * - `'auto'` to allow the framework to select the appropriate picker for the device.
	 * 
	 * Can also be a config object for the picker.
	 * 
	 */
	picker?: string | any

	/**
	 * A string value displayed in the input when the control is empty.
	 * 
	 */
	placeholder?: string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * True to set the field DOM element readonly attribute to true.
	 * 
	 */
	readOnly?: boolean

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * 
	 * `true` to make this field required.
	 * 
	 * __Note:__ this only causes a visual indication.
	 * 
	 * Doesn't prevent user from submitting the form.
	 * 
	 */
	required?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * The selected model. `null` if no value exists.
	 * 
	 */
	selection?: any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * The value that the Field had at the time it was last focused. This is the value that is passed
	 * to the Ext.field.Text#change event which is fired if the value has been changed when the Field is blurred.
	 * 
	 * __This will be `undefined` until the Field has been visited.__ Compare originalValue.
	 * 
	 */
	startValue?: any

	/**
	 * The store to provide selection options data.
	 * Either a Store instance, configuration object or store ID.
	 * 
	 */
	store?: any | string

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * The `tabIndex` for this field. Note this only applies to fields that are rendered,
	 * not those which are built via `applyTo`.
	 * 
	 */
	tabIndex?: number

	/**
	 * The text alignment of this field.
	 * 
	 */
	textAlign?: string

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * Ext.field.trigger.Trigger to use in this field.  The keys in
	 * this object are unique identifiers for the triggers. The values in this object
	 * are Ext.field.trigger.Trigger configuration objects.
	 * 
	 * The weight value may be a negative value in order to position custom triggers
	 * ahead of default triggers like that of a DatePicker field.
	 * 
	 */
	triggers?: any

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	useClearIcon?: boolean

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * 
	 * `true` to validate the field, even if it is disabled.
	 * 
	 */
	validateDisabled?: boolean

	/**
	 * For HTML5 validation, regex, etc., this is the error message returned if field is invalid.
	 * 
	 */
	validationMessage?: string

	/**
	 * A value to initialize this field with.
	 * 
	 */
	value?: any

	/**
	 * The underlying name to bind to this
	 * Select control. If configured as `null`, the cfg!displayField is used.
	 * 
	 */
	valueField?: string | number

	/**
	 * If the value passed to setValue is not found in the store, valueNotFoundText will
	 * be displayed as the field text if defined. If this default text is used, it means there
	 * is no value set and no validation will occur on this field.
	 * 
	 */
	valueNotFoundText?: string

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever the return key or go is pressed. FormPanel listeners
	 * for this event, and submits itself whenever it fires. Also note
	 * that this event bubbles up to parent containers.
	 * 
	 */
	onAction?: (me: any, e: any) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this field loses input focus
	 * 
	 */
	onBlur?: (me: any, e: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when an option selection has changed
	 * 
	 */
	onChange?: (me: any, newValue: any, oldValue: any) => void

	/**
	 * Fires when the clear icon is tapped
	 * 
	 */
	onClearIconTap?: (me: any, input: any, e: any) => void

	/**
	 * Fires whenever the input is clicked.
	 * 
	 */
	onClick?: (e: any) => void

	/**
	 * Fires when the field's picker is collapsed.
	 * 
	 */
	onCollapse?: (field: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when the field's picker is expanded.
	 * 
	 */
	onExpand?: (field: any) => void

	/**
	 * Fires when this field receives input focus. This happens both when you tap on the field and when you focus on the field by using
	 * 'next' or 'tab' on a keyboard.
	 * 
	 * Please note that this event is not very reliable on Android. For example, if your Select field is second in your form panel,
	 * you cannot use the Next button to get to this select field. This functionality works as expected on iOS.
	 * 
	 */
	onFocus?: (me: any, e: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * Fires when a key is released on the input element
	 * 
	 */
	onKeyUp?: (me: any, e: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this field receives a mousedown
	 * 
	 */
	onMouseDown?: (me: any, e: any) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires when this field is pasted.
	 * 
	 */
	onPaste?: (me: any, e: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * An edit form implementation for data used with Ext.calendar.model.Event.
 * 
 */
declare class Calendar_Form_Edit extends React.Component<Calendar_Form_EditProps, any> { }
export interface Calendar_Form_EditProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The config for the all day field.
	 * 
	 */
	allDayField?: any

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * If specified, load and submit actions will be loaded and submitted via Ext Direct.  Methods which have been imported by
	 * Ext.direct.Manager can be specified here to load and submit forms. API methods may also be
	 * specified as strings and will be parsed into the actual functions when the first submit or load has occurred. Such as the following:
	 * 
	 *      api: {
	 *          load: App.ss.MyProfile.load,
	 *          submit: App.ss.MyProfile.submit
	 *      }
	 * 
	 *      api: {
	 *          load: 'App.ss.MyProfile.load',
	 *          submit: 'App.ss.MyProfile.submit'
	 *      }
	 * 
	 * You can also use a prefix instead of fully qualified function names:
	 * 
	 *      api: {
	 *          prefix: 'App.ss.MyProfile',
	 *          load: 'load',
	 *          submit: 'submit'
	 *      }
	 * 
	 * Load actions can use paramOrder or paramsAsHash to customize how the load method
	 * is invoked.  Submit actions will always use a standard form submit. The `formHandler` configuration
	 * (see Ext.direct.RemotingProvider#action) must be set on the associated server-side method which has
	 * been imported by Ext.direct.Manager.
	 * 
	 */
	api?: any

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * Optional hash of params to be sent (when `standardSubmit` configuration is `false`) on every submit.
	 * 
	 */
	baseParams?: any

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * The config for the calendar field.
	 * 
	 */
	calendarField?: any

	/**
	 * The config for the cancel button.
	 * 
	 */
	cancelButton?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The default start time for events. Should be in the
	 * format `[hour, minute]`.
	 * 
	 */
	defaultEndTime?: number[]

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default start time for events. Should be in the
	 * format `[hour, minute]`.
	 * 
	 */
	defaultStartTime?: number[]

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * The config for the description field.
	 * 
	 */
	descriptionField?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * The config for the drop button. `null` to not show this button.
	 * 
	 */
	dropButton?: any

	/**
	 * The submission form is generated but never added to the dom. It is a submittable
	 * version of your form panel, allowing for fields that are not simple text-fields
	 * to be properly submitted to servers. It will also send values that are easier to parse
	 * with server side code.
	 * 
	 * If this is false we will attempt to subject the raw form inside the form panel.
	 * 
	 */
	enableSubmissionForm?: boolean

	/**
	 * The enctype attribute for the form, specifies how the form should be encoded when submitting
	 * 
	 */
	enctype?: string

	/**
	 * The config for the end date field.
	 * 
	 */
	endDateField?: any

	/**
	 * The config for the end time field.
	 * 
	 */
	endTimeField?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The method which this form will be submitted. `post` or `get`.
	 * 
	 */
	method?: string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * If this is enabled the form will automatically detect the need to use
	 * 'multipart/form-data' during submission.
	 * 
	 */
	multipartDetection?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * Forms can be assigned names to be used in parent forms.
	 * 
	 */
	nameable?: any

	nameHolder?: any

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * A list of params to be executed server side. Only used for the api `load`
	 * configuration.
	 * 
	 * Specify the params in the order in which they must be executed on the
	 * server-side as either (1) an Array of String values, or (2) a String of params
	 * delimited by either whitespace, comma, or pipe. For example,
	 * any of the following would be acceptable:
	 * 
	 *     paramOrder: ['param1','param2','param3']
	 *     paramOrder: 'param1 param2 param3'
	 *     paramOrder: 'param1,param2,param3'
	 *     paramOrder: 'param1|param2|param'
	 * 
	 */
	paramOrder?: string | string[]

	/**
	 * Only used for the api `load` configuration. If true, parameters will be sent as a
	 * single hash collection of named arguments. Providing a paramOrder nullifies this
	 * configuration.
	 * 
	 */
	paramsAsHash?: boolean

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * The model instance of this form. Can by dynamically set at any time.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * The config for the save button.
	 * 
	 */
	saveButton?: any

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Forms can be assigned the same name as other forms in their parent form. This
	 * means that if a form is assigned a `name` it will be returned as an array from
	 * `lookupName` in its parent form.
	 * 
	 */
	shareableName?: any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Whether or not we want to perform a standard form submit.
	 * 
	 */
	standardSubmit?: boolean

	/**
	 * The config for the start date field.
	 * 
	 */
	startDateField?: any

	/**
	 * The config for the start time field.
	 * 
	 */
	startTimeField?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * When this is set to `true`, the form will automatically submit itself whenever the `action`
	 * event fires on a field in this form. The action event usually fires whenever you press
	 * go or enter inside a textfield.
	 * 
	 */
	submitOnAction?: any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * Timeout for form actions in seconds.
	 * 
	 */
	timeout?: number

	/**
	 * The title for the dialog.
	 * 
	 */
	title?: string

	/**
	 * The config for the title field.
	 * 
	 */
	titleField?: any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * If set to true, reset() resets to the last loaded or setValues() data instead of
	 * when the form was first created.
	 * 
	 */
	trackResetOnLoad?: boolean

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * The default url for submit actions.
	 * 
	 */
	url?: string

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * Fires immediately preceding any Form submit action.
	 * Implementations may adjust submitted form values or options prior to execution.
	 * A return value of `false` from this listener will abort the submission
	 * attempt (regardless of `standardSubmit` configuration).
	 * 
	 */
	onBeforeSubmit?: (me: any, values: any, options: any, e: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when either the Ajax HTTP request reports a failure OR the server returns a `success:false`
	 * response in the result payload.
	 * 
	 */
	onException?: (me: any, result: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * Fires upon successful (Ajax-based) form submission.
	 * 
	 */
	onSubmit?: (me: any, result: any, e: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

declare class Calendar_TimeField extends React.Component<Calendar_TimeFieldProps, any> { }
export interface Calendar_TimeFieldProps extends FlexibleProps {

	/**
	 * The template used to format the Array of error messages passed to setActiveErrors into a single HTML
	 * string. if the msgTarget is title, it defaults to a list separated by new lines. Otherwise, it
	 * renders each message as an item in an unordered list.
	 * 
	 */
	activeErrorsTpl?: string | string[] | any

	/**
	 * Specify `false` to not accept blank values
	 * 
	 */
	allowBlank?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * True to set the field's DOM element auto=capitalize attribute to "on", false to set to "off".
	 * 
	 */
	autoCapitalize?: boolean

	/**
	 * Autocomplete is disabled on Picker fields by default.
	 * 
	 */
	autoComplete?: boolean

	/**
	 * True to set the field DOM element auto-correct attribute to "on", false to set to "off".
	 * 
	 */
	autoCorrect?: boolean

	/**
	 * Whether to adjust the component's body width to make room for messages.
	 * 
	 */
	autoFitErrors?: boolean

	/**
	 * This option controls whether to *initially* load the store when a value is set so that
	 * the display value can be determined from the appropriate record.
	 * The store will only be loaded in a limited set of circumstances:
	 * - The store is not currently loading.
	 * - The store does not have a pending Ext.data.Store#autoLoad.
	 * - The store has not been loaded before.
	 * 
	 */
	autoLoadOnValue?: boolean

	/**
	 * `true` to auto select the first value in the store or options when they are changed. Only happens when
	 * the value is set to `null`.
	 * 
	 */
	autoSelect?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * The error text to display if the **allowBlank** validation fails.
	 * 
	 */
	blankText?: string

	/**
	 * 
	 * The horizontal alignment of this field's component within the body
	 * of the field
	 * 
	 */
	bodyAlign?: string

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	clearIcon?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * The config object to factory the Component that this Decorator wraps around.
	 * 
	 */
	component?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * 
	 * `true` to disable the field.
	 * 
	 * Be aware that conformant with the [HTML specification](http://www.w3.org/TR/html401/interact/forms.html),
	 * disabled Fields will not be submitted.
	 * 
	 */
	disabled?: boolean

	/**
	 * The underlying name to bind to this
	 * Select control.  If configured as `null`, the cfg!valueField is used.
	 * 
	 * This resolved value is the visibly rendered value of the available selection options.
	 * 
	 */
	displayField?: string | number

	/**
	 * The template to be used to display the selected record inside the text field.
	 * 
	 * If not specified, the cfg!displayField is shown in the text field.
	 * 
	 */
	displayTpl?: Function | string | string[]

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * A configuration object, containing an cfg#xtype property which specifies the widget to
	 * create if `cfg!picker: 'edge'` (or if it's '`auto'` and the app is on a phone)
	 * 
	 */
	edgePicker?: string | any

	/**
	 * Configure as `false` to prevent the user from typing text directly into the field;
	 * the field can only have its value set programmatically or via an action invoked by a trigger.
	 * 
	 * Contrast with cfg!readOnly which disables all mutation via the UI.
	 * 
	 */
	editable?: boolean

	/**
	 * A configuration object, containing an cfg#xtype property which specifies the widget to
	 * create if `cfg!picker: 'floated'` (or if it's '`auto'` and the app is *not* on a phone)
	 * 
	 */
	floatedPicker?: string | any

	/**
	 * *Only valud when the cfg!floatedPicker is used.
	 * The Ext.Component#method!showBy alignment string to use when showing
	 * the floated picker by the input field.
	 * 
	 */
	floatedPickerAlign?: string

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * By default the value must always be the cfg!valueField of one of the records in the store.
	 * Configure as `false` to allow the value to be set to arbitrary text, and have this component
	 * auto create an associated record with the typed value as the cfg!valueField.
	 * 
	 */
	forceSelection?: boolean

	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Specify a `hiddenName` if you're using the standardSubmit option.
	 * This name will be used to post the underlying value of the select to the server.
	 * 
	 */
	hiddenName?: string

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * CSS class to add to the input element of this field
	 * 
	 */
	inputCls?: string

	/**
	 * 
	 * The type attribute for input fields -- e.g. text, password, date, url, email, etc.
	 * 
	 */
	inputType?: string

	/**
	 * An XTemplate definition string (Or an Ext.XTemplate) which specifies how to display a list
	 * item from a record values object. This is automatically generated to display the cfg!displayField
	 * if not specified.
	 * 
	 */
	itemTpl?: Function | string | string[]

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The label of this field
	 * 
	 */
	label?: string

	/**
	 * When value is `'placeholder'`, the label text will be rendered as placeholder
	 * text inside the empty input and will animated to "top" alignment when the input
	 * is focused or contains text.
	 * 
	 * The position to render the label relative to the field input.
	 * 
	 */
	labelAlign?: string

	/**
	 * Optional CSS class to add to the Label element.
	 * 
	 */
	labelCls?: string

	/**
	 * 
	 * Text alignment of this field's label
	 * 
	 */
	labelTextAlign?: string

	/**
	 * The width to make this field's label.
	 * 
	 */
	labelWidth?: number | string

	/**
	 * 
	 * `true` to allow the label to wrap. If set to `false`, the label will be truncated with
	 * an ellipsis.
	 * 
	 */
	labelWrap?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * *Only valid when the `cfg!picker: 'floated'` is used.
	 * Whether the cfg!floatedPicker's width should be explicitly set to
	 * match the width of the input element.
	 * 
	 */
	matchFieldWidth?: boolean

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum number of permitted input characters.
	 * 
	 */
	maxLength?: number

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * [msgTarget="qtip"]
	 * 
	 * The location where the error message text should display.  Must be one of the
	 * following values:
	 * 
	 * * qtip Display a quick tip containing the message when the user hovers (or taps) the field.  This is the default.
	 *   Ext.tip.Manager#init must have been called for this setting to work.
	 * * title Display the message in a default browser title attribute popup
	 * * under Add a block div beneath the field containing the error message.
	 * * side Add an error icon to the right of the field, displaying the message in a popup on hover or tap
	 * * none Don't display any error message.  This might be useful if you are implementing custom error display.
	 * [element id] Add the error message to the innerHTML of the specified element
	 * 
	 */
	msgTarget?: string

	/**
	 * 
	 * The field's HTML name attribute.
	 * 
	 * __Note:__ this property must be set if this field is to be automatically included with.
	 * submit().
	 * 
	 */
	name?: string

	/**
	 * An array of select options.
	 * 
	 *     [
	 *         {text: 'First Option',  value: 'first'},
	 *         {text: 'Second Option', value: 'second'},
	 *         {text: 'Third Option',  value: 'third'}
	 *     ]
	 * 
	 * __Note:__ Option object member names should correspond with defined valueField and displayField values.
	 * This config will be ignored if a store instance is provided.
	 * 
	 */
	options?: any[]

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * The value for the HTML5 `pattern` attribute.
	 * You can use this to change which keyboard layout will be used.
	 * 
	 * Even though it extends Ext.field.Text, it will display the number keyboard.
	 * 
	 */
	pattern?: string

	/**
	 * 
	 * A string representing the type of picker to use.  Can be one of the following values.
	 * 
	 * - `'edge'` to use the edgePicker, generally used on small formfactor devices.
	 * - `'floated'` to use the floatedPicker, generally used on tablets or desktops.
	 * - `'auto'` to allow the framework to select the appropriate picker for the device.
	 * 
	 * Can also be a config object for the picker.
	 * 
	 */
	picker?: string | any

	/**
	 * A string value displayed in the input when the control is empty.
	 * 
	 */
	placeholder?: string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * True to set the field DOM element readonly attribute to true.
	 * 
	 */
	readOnly?: boolean

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * 
	 * `true` to make this field required.
	 * 
	 * __Note:__ this only causes a visual indication.
	 * 
	 * Doesn't prevent user from submitting the form.
	 * 
	 */
	required?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * The selected model. `null` if no value exists.
	 * 
	 */
	selection?: any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * The value that the Field had at the time it was last focused. This is the value that is passed
	 * to the Ext.field.Text#change event which is fired if the value has been changed when the Field is blurred.
	 * 
	 * __This will be `undefined` until the Field has been visited.__ Compare originalValue.
	 * 
	 */
	startValue?: any

	/**
	 * The store to provide selection options data.
	 * Either a Store instance, configuration object or store ID.
	 * 
	 */
	store?: any | string

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * The `tabIndex` for this field. Note this only applies to fields that are rendered,
	 * not those which are built via `applyTo`.
	 * 
	 */
	tabIndex?: number

	/**
	 * The text alignment of this field.
	 * 
	 */
	textAlign?: string

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * Ext.field.trigger.Trigger to use in this field.  The keys in
	 * this object are unique identifiers for the triggers. The values in this object
	 * are Ext.field.trigger.Trigger configuration objects.
	 * 
	 * The weight value may be a negative value in order to position custom triggers
	 * ahead of default triggers like that of a DatePicker field.
	 * 
	 */
	triggers?: any

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	useClearIcon?: boolean

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * 
	 * `true` to validate the field, even if it is disabled.
	 * 
	 */
	validateDisabled?: boolean

	/**
	 * For HTML5 validation, regex, etc., this is the error message returned if field is invalid.
	 * 
	 */
	validationMessage?: string

	/**
	 * A value to initialize this field with.
	 * 
	 */
	value?: any

	/**
	 * The underlying name to bind to this
	 * Select control. If configured as `null`, the cfg!displayField is used.
	 * 
	 */
	valueField?: string | number

	/**
	 * If the value passed to setValue is not found in the store, valueNotFoundText will
	 * be displayed as the field text if defined. If this default text is used, it means there
	 * is no value set and no validation will occur on this field.
	 * 
	 */
	valueNotFoundText?: string

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever the return key or go is pressed. FormPanel listeners
	 * for this event, and submits itself whenever it fires. Also note
	 * that this event bubbles up to parent containers.
	 * 
	 */
	onAction?: (me: any, e: any) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this field loses input focus
	 * 
	 */
	onBlur?: (me: any, e: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when an option selection has changed
	 * 
	 */
	onChange?: (me: any, newValue: any, oldValue: any) => void

	/**
	 * Fires when the clear icon is tapped
	 * 
	 */
	onClearIconTap?: (me: any, input: any, e: any) => void

	/**
	 * Fires whenever the input is clicked.
	 * 
	 */
	onClick?: (e: any) => void

	/**
	 * Fires when the field's picker is collapsed.
	 * 
	 */
	onCollapse?: (field: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when the field's picker is expanded.
	 * 
	 */
	onExpand?: (field: any) => void

	/**
	 * Fires when this field receives input focus. This happens both when you tap on the field and when you focus on the field by using
	 * 'next' or 'tab' on a keyboard.
	 * 
	 * Please note that this event is not very reliable on Android. For example, if your Select field is second in your form panel,
	 * you cannot use the Next button to get to this select field. This functionality works as expected on iOS.
	 * 
	 */
	onFocus?: (me: any, e: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * Fires when a key is released on the input element
	 * 
	 */
	onKeyUp?: (me: any, e: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this field receives a mousedown
	 * 
	 */
	onMouseDown?: (me: any, e: any) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires when this field is pasted.
	 * 
	 */
	onPaste?: (me: any, e: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * A header for Ext.calendar.view.Days to display the
 * active dates.
 * 
 */
declare class Calendar_DaysHeader extends React.Component<Calendar_DaysHeaderProps, any> { }
export interface Calendar_DaysHeaderProps extends FlexibleProps {

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * A class to add to each day cell.
	 * 
	 */
	cellCls?: string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * The format to display the day in the header.
	 * 
	 */
	format?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The starting value to display.
	 * 
	 */
	value?: any

	/**
	 * The number of days to display, starting from the value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * A header for Ext.calendar.view.Weeks to display day names.
 * 
 */
declare class Calendar_WeeksHeader extends React.Component<Calendar_WeeksHeaderProps, any> { }
export interface Calendar_WeeksHeaderProps extends FlexibleProps {

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * A class to add to each day cell.
	 * 
	 */
	cellCls?: string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * The format to display the day in the header.
	 * 
	 */
	format?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The starting value to display.
	 * 
	 */
	value?: any

	/**
	 * The number of days to display, starting from the value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * A simple view for displaying a list of calendars.
 * 
 */
declare class Calendar_List extends React.Component<Calendar_ListProps, any> { }
export interface Calendar_ListProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The xtype used for the component based DataView.
	 * 
	 * __Note:__ this is only used when `useComponents` is `true`.
	 * 
	 */
	defaultType?: string

	/**
	 * `true` to defer `emptyText` being applied until the store's first load.
	 * 
	 */
	deferEmptyText?: boolean

	/**
	 * When set to true, tapping on the DataView's background (i.e. not on
	 * an item in the DataView) will deselect any currently selected items.
	 * 
	 */
	deselectOnContainerClick?: boolean

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * The text to display in the view when there is no data to display
	 * 
	 */
	emptyText?: string

	/**
	 * `true` to allow the calendar hidden
	 * state to be toggled when tapping on a calendar.
	 * 
	 */
	enableToggle?: boolean

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * When set to `true` the items within the DataView will have their display set to inline-block
	 * and be arranged horizontally. By default the items will wrap to the width of the DataView.
	 * Passing an object with `{ wrap: false }` will turn off this wrapping behavior and overflowed
	 * items will need to be scrolled to horizontally.
	 * 
	 */
	inline?: boolean | any

	/**
	 * An additional CSS class to apply to items within the DataView.
	 * 
	 */
	itemCls?: string

	/**
	 * A configuration object that is passed to every item created by a component based DataView. Because each
	 * item that a DataView renders is a Component, we can pass configuration options to each component to
	 * easily customize how each child component behaves.
	 * 
	 * __Note:__ this is only used when `useComponents` is `true`.
	 * 
	 */
	itemConfig?: any

	/**
	 * The `tpl` to use for each of the items displayed in this DataView.
	 * 
	 */
	itemTpl?: string | string[] | any

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * If specified, gives an explicit height for a cfg!floated data view when it is showing the loadingText,
	 * if that is specified. This is useful to prevent the view's height from collapsing to zero when the
	 * loading mask is applied and there are no other contents in the data view.
	 * 
	 */
	loadingHeight?: number

	/**
	 * A string to display during data load operations.  If specified, this text will be
	 * displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
	 * contents will continue to display normally until the new data is loaded and the contents are replaced.
	 * 
	 */
	loadingText?: string | boolean

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * Maintains a cache of reusable components when using a component based DataView.  Improving performance at
	 * the cost of memory.
	 * 
	 * __Note:__ this is currently only used when `useComponents` is `true`.
	 * 
	 */
	maxItemCache?: number

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * The amount of delay between the `tapstart` and the moment we add the `pressedCls`.
	 * 
	 */
	pressedDelay?: number

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Scroll the DataView to the top when the DataView is refreshed.
	 * 
	 */
	scrollToTopOnRefresh?: boolean

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Can be either a Store instance or a configuration object that will be turned into a Store. The Store is used
	 * to populate the set of items that will be rendered in the DataView. See the DataView intro documentation for
	 * more information about the relationship between Store and DataView.
	 * 
	 */
	store: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * Determines what type of touch event is recognized as a touch on the container.
	 * Valid options are 'tap' and 'singletap'.
	 * 
	 */
	triggerCtEvent?: string

	/**
	 * Determines what type of touch event causes an item to be selected.
	 * Valid options are: 'itemtap', 'itemsingletap',
	 * 'itemdoubletap', 'itemswipe', 'itemtaphold', 'itemlongpress'.
	 * 
	 */
	triggerEvent?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * Flag the use a component based DataView implementation.  This allows the full use of components in the
	 * DataView at the cost of some performance.
	 * 
	 */
	useComponents?: boolean

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	onAdd?: () => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires whenever an item is deselected
	 * 
	 */
	onDeselect?: (me: any, records: any, supressed: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * Fires whenever an item is doubletapped
	 * 
	 */
	onItemDoubleTap?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item's longpress event fires
	 * 
	 */
	onItemLongPress?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever the mouse pointer moves over an item
	 * 
	 */
	onItemMouseEnter?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever the mouse pointer leaves an item
	 * 
	 */
	onItemMouseLeave?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is singletapped
	 * 
	 */
	onItemSingleTap?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is swiped
	 * 
	 */
	onItemSwipe?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is tapped
	 * 
	 */
	onItemTap?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item's taphold event fires
	 * 
	 */
	onItemTapHold?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item touch is cancelled
	 * 
	 */
	onItemTouchCancel?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is touched
	 * 
	 */
	onItemTouchEnd?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is moved
	 * 
	 */
	onItemTouchMove?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * Fires whenever an item is touched
	 * 
	 */
	onItemTouchStart?: (me: any, index: number, target: any, record: any, e: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	onMove?: () => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever the DataView is refreshed
	 * 
	 */
	onRefresh?: (me: any) => void

	onRemove?: () => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a selection changes and a Ext.data.virtual.Store is being used.
	 * 
	 */
	onRowSelection?: (view: any, selection: any) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever an item is selected
	 * 
	 */
	onSelect?: (me: any, records: any) => void

	/**
	 * Fires when a selection changes.
	 * 
	 */
	onSelectionChange?: (view: any, records: any, selected: boolean, selection: any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar panels see Ext.calendar.panel.Base
 * 
 * A panel for display a single day. Composes a
 * Ext.calendar.view.Day with a
 * Ext.calendar.header.Base.
 * 
 * The Day panel operates the same as its parent Ext.calendar.panel.Days
 * panel with one notable difference: the cfg-visibleDays for the Day panel is
 * `1` resulting in only a single day displayed at a time.
 * 
 * ### Alternative Classes
 * 
 * To display more than a single day consider using the Ext.calendar.panel.Days
 * or Ext.calendar.panel.Week views.
 * 
 */
declare class Calendar_Day extends React.Component<Calendar_DayProps, any> { }
export interface Calendar_DayProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	controlStoreRange?: any

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * A config for the Ext.calendar.header.Base. This can be
	 * configured directly on the panel.  The relevant configurations will be
	 * forwarded to the header.
	 * 
	 */
	dayHeader?: any

	/**
	 * The format to display the day in the header.
	 * 
	 */
	dayHeaderFormat?: string

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	eventRelayers?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value for the current view.
	 * 
	 *     value: new Date('10-02-2016') // to set the date to Oct 2nd 2016
	 * 
	 */
	value?: any

	/**
	 * A config for the main calendar view. This can be configured directly on the panel,
	 * the relevant configurations will be forwarded to the view.
	 * 
	 */
	view?: any

	visibleDays?: any

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar panels see Ext.calendar.panel.Base
 * 
 * A panel for display a series of days. Composes a
 * Ext.calendar.view.Days with a
 * Ext.calendar.header.Base.
 * 
 * The Days panel displays events for multiple days with the time of day along the y axis.
 * The panel will display the current date as the first day displayed unless configured
 * with a different date cfg-value.  The number of days displayed can be set
 * using the cfg-visibleDays config option.  By default, the calendar hours are
 * displayed as a 24 hour clock and are constrained to 8 (8:00am) and 20 (8:00pm).  The
 * beginning and end hour can be set using the cfg-startTime and
 * cfg-endTime configs.  The time displayed on the timeline may be customized
 * using either the cfg-timeFormat or cfg-timeRenderer config options.
 * 
 * Below are some of the distinctions to the Days panel (and generally its subclasses).
 * 
 * ### Current Local Time
 * 
 * The current local time (when the current date is displayed) will be shown on the panel
 * as a thin marker on the day's timeline.  The current time marker can be set using the
 * cfg-showNowMarker option.
 * 
 * ### Calendar Events
 * 
 * Events show on the timeline with their start and end times correlating to the time
 * labels.  The events will display on the timeline according to your local timezone
 * offset from GMT.  The timezone offset can be applied explicitly using the
 * cfg-timezoneOffset config option.  The exception being all day or multi-day
 * events.  All day / multi-day events will show up at the top of the panel in a dedicated
 * space preceding the panel's start time.
 * 
 * ### Adding All Day Events
 * 
 * In addition to being able to drag / swipe across a day's timeline to show the event
 * add form, an all day type event can be quickly added by tapping / clicking on the
 * dedicated all day row displayed above the start hour.  This is the same dedicated
 * space used to display existing all day events.
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward the number of days set on the
 * cfg-visibleDays config.
 * 
 * ### Alternative Classes
 * 
 * To display a single day consider using the Ext.calendar.panel.Day panel or
 * Ext.calendar.panel.Week to view a week at a time.
 * 
 */
declare class Calendar_Days extends React.Component<Calendar_DaysProps, any> { }
export interface Calendar_DaysProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	controlStoreRange?: any

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * A config for the Ext.calendar.header.Base. This can be
	 * configured directly on the panel.  The relevant configurations will be
	 * forwarded to the header.
	 * 
	 */
	dayHeader?: any

	/**
	 * The format to display the day in the header.
	 * 
	 */
	dayHeaderFormat?: string

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	eventRelayers?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value for the current view.
	 * 
	 *     value: new Date('10-02-2016') // to set the date to Oct 2nd 2016
	 * 
	 */
	value?: any

	/**
	 * A config for the main calendar view. This can be configured directly on the panel,
	 * the relevant configurations will be forwarded to the view.
	 * 
	 */
	view?: any

	/**
	 * The number of days to show starting from the cfg-value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * For an overview of calendar panels see Ext.calendar.panel.Base
 * 
 * A panel for display a calendar month. Composes a
 * Ext.calendar.view.Month with a
 * Ext.calendar.header.Base.
 * 
 * The Month panel shows events over an entire month.  The panel shows a summary of the
 * events that occur on each day.  The Month view uses the current date (or the date set
 * on the cfg-value config) to determine the month to show.
 * 
 * The Month panel displays (as needed) days from trailing/leading months as required to
 * fill the space in the view based on the cfg-value and the
 * cfg-firstDayOfWeek.  In the following example, the view will start on Sun Dec
 * 27 and conclude on Sat Feb 6 because we require 6 rows to display the month of
 * January.
 * 
 *      {
 *          value: new Date(2010, 0, 1) // Fri
 *          firstDayOfWeek: 0 // Sunday
 *      }
 * 
 * The cfg-visibleWeeks can be specified as `null` to allow the view to
 * calculate the appropriate number of rows to show in the view, as this varies
 * from month to month.  This defaults to the largest possible value (6 weeks) so that
 * the view size is consistent across months.
 * 
 * ### Date Range Navigation
 * 
 * In addition to cfg-navigate, cfg-movePrevious, and
 * cfg-moveNext the Month view let you quickly navigate between months and
 * years.  The cfg-previousMonth and cfg-nextMonth methods allow for
 * programmatic month-to-month navigation while cfg-previousYear and
 * cfg-nextYear navigate the view across years.
 * 
 * ### Alternative Classes
 * 
 * For a multi-week panel refer to Ext.calendar.panel.Weeks.
 * 
 */
declare class Calendar_Month extends React.Component<Calendar_MonthProps, any> { }
export interface Calendar_MonthProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	addOnSelect?: boolean

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	controlStoreRange?: any

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	dayFormat?: boolean

	/**
	 * A config for the Ext.calendar.header.Base. This can be
	 * configured directly on the panel.  The relevant configurations will be
	 * forwarded to the header.
	 * 
	 */
	dayHeader?: any

	/**
	 * The format to display the day in the header.
	 * 
	 */
	dayHeaderFormat?: string

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	eventRelayers?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	firstDayOfWeek?: boolean

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	overflowText?: boolean

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Show an overflow label that will display an overlay when
	 * there are too many events to render in the view. Valid
	 * configurations are:
	 * - `top`
	 * - `bottom`
	 * 
	 * Pass `null` or `''` to not show overflow.
	 * The overflow text may be formatted using cfg-overflowText.
	 * 
	 */
	showOverflow?: string

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The current month to show. The value will default to the
	 * first date of the configured month.  For example:
	 * 
	 *      calendar.setValue(new Date(2010, 0, 13));
	 *      console.log(calendar.getValue()); // -> 2010-01-01
	 * 
	 */
	value?: any

	/**
	 * A config for the main calendar view. This can be configured directly on the panel,
	 * the relevant configurations will be forwarded to the view.
	 * 
	 */
	view?: any

	/**
	 * The number of days to show in a week, starting from the firstDayOfWeek.
	 * For example, to show the view with days `Mon - Fri`, use:
	 * 
	 *      {
	 *          visibleDays: 5,
	 *          firstDayOfWeek: 1 // Monday
	 *      }
	 * 
	 */
	visibleDays?: number

	/**
	 * The number of weeks to show in this view. If specified as `null`, the view will generate the appropriate
	 * number of rows to display a full month based on the passed cfg-value. In a majority of cases,
	 * this will be 5, however some months will only require 4, while others will need 6. Defaults to the
	 * largest value to keep the view size consistent.
	 * 
	 */
	visibleWeeks?: number

	/**
	 * The days of the week that are the weekend. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#weekendDays.
	 * 
	 */
	weekendDays?: number[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * This class is the main calendar panel, it wraps Ext.calendar.view.Multi.
 * 
 * It allows switching between multiple views of the same dataset. It is composed of the
 * other calendar types such as Ext.calendar.panel.Month,
 * Ext.calendar.panel.Week, and Ext.calendar.panel.Day.
 * 
 * It also provides extra UI features like a switcher button,
 * bar, and navigation buttons.
 * 
 * Sample Calendar panel
 * 
 *     store = new Ext.data.Store({
 *         autoLoad: true,
 *         proxy: {
 *             type: 'ajax',
 *             url: 'calendars.php'
 *         },
 *         eventStoreDefaults: {
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'events.php'
 *             }
 *         }
 *     });
 * 
 *     <Calendar
 *         height={400}
 *         width={600}
 *         store={this.store}
 *     />
 * 
 * By default, the Calendar panel contains a Ext.calendar.panel.Day,
 * Ext.calendar.panel.Week, and Ext.calendar.panel.Month view.
 * Configurations for these views may be passed in the cfg-views config option.
 * For example, to display only a 5-day work week instead of the default 7-day week the
 * following `views` config would be used:
 * 
 *     store = new Ext.data.Store({
 *         autoLoad: true,
 *         proxy: {
 *             type: 'ajax',
 *             url: 'calendars.php'
 *         },
 *         eventStoreDefaults: {
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'events.php'
 *             }
 *         }
 *     });
 * 
 *     <Calendar
 *         height={400}
 *         width={600}
 *         store={this.store}
 *         views={{
 *             week: {
 *                 visibleDays: 5,
 *                 firstDayOfWeek: 1
 *             }
 *         }}
 *     />
 * 
 * The previous example will result in a Day, Week, and Month view in the Calendar panel
 * with the Week view displaying only 5 days.  Set a default view to `null` to prevent it
 * from being included in the Calendar panel.
 * 
 *     store = new Ext.data.Store({
 *         autoLoad: true,
 *         proxy: {
 *             type: 'ajax',
 *             url: 'calendars.php'
 *         },
 *         eventStoreDefaults: {
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'events.php'
 *             }
 *         }
 *     });
 * 
 *     <Calendar
 *         height={400}
 *         width={600}
 *         store={this.store}
 *         views: {{
 *             month: null,  // now only the Week and Day calendars will be included
 *             week: {
 *                 visibleDays: 5,
 *                 firstDayOfWeek: 1
 *             }
 *         }}
 *     />
 * 
 * See the cfg-views config for additional configuration options.
 * 
 * The default view is "month".  This can be set using the cfg-defaultView
 * config option.
 * 
 * The following Multi view configs will be applied to any calendar panel in the views
 * config:
 * 
 *  - cfg-compact
 *  - cfg-compactOptions
 *  - cfg-store
 *  - cfg-timezoneOffset
 *  - cfg-value
 * 
 */
declare class Calendar extends React.Component<CalendarProps, any> { }
export interface CalendarProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * The config for creating the {@link Ext.calendar.List calendar list).
	 * 
	 */
	calendarList?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * The compact config is applied to all configured cfg-views.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * The compactOptions config is applied to all configured cfg-views.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The config for creating the create button.  Clicking / tapping the create
	 * button shows the Ext.calendar.form.Add.  To prevent the
	 * create button from being created use `null`.
	 * 
	 *     createButton: null
	 * 
	 * To configure the add form or prevent a user from adding events via calendar
	 * interactions see calendar view's
	 * addForm config option.
	 * 
	 */
	createButton?: any

	/**
	 * The position for the create button. Can be "sideBar" or "titleBar".
	 * 
	 */
	createButtonPosition?: string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The config for the date title.
	 * 
	 * **Note:** The date title template is configurable within the
	 * cfg-views config option for each view
	 * 
	 */
	dateTitle?: any

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * The key of the item from views to use as the default.
	 * 
	 */
	defaultView?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The configuration for the menu button in compact mode.
	 * 
	 */
	menuButton?: any

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The configuration for the next navigation button.
	 * 
	 */
	nextButton?: any

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * The configuration for the previous navigation button.
	 * 
	 */
	previousButton?: any

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * The configuration for the sheet in compact mode.
	 * 
	 */
	sheet?: any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * The configuration for the sidebar. Extra items can be added/inserted into
	 * the sidebar by adding the items configuration. Items will be sorted by a `weight`
	 * property. Existing items in the sidebar have weights `0-100` with an increment of 10
	 * for each item. Use a number less than 0 to insert at the front. Use a number larger than 100
	 * to insert at the end.
	 * 
	 */
	sideBar?: any

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * The store config is applied to all configured cfg-views.
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * The position for the create button. Can be `sideBar` or `titleBar`.
	 * 
	 */
	switcherPosition?: string

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * The timezoneOffset config is applied to all configured cfg-views.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * The configuration for the titleBar. Extra items can be added/inserted into
	 * the title bar by adding the items configuration. Items will be sorted by a
	 * `weight` property. Existing items in the title bar have weights `0-100` with
	 * an increment of 10 for each item. Use a number less than 0 to insert at the
	 * front. Use a number larger than 100 to insert at the end.
	 * 
	 */
	titleBar?: any

	/**
	 * The configuration for the today button.
	 * 
	 */
	todayButton?: any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value for the current view.
	 * 
	 *     value: new Date('10-02-2016') // to set the date to Oct 2nd 2016
	 * The value config is applied to all configured cfg-views.
	 * 
	 */
	value?: any

	/**
	 * The calendar views to have available.  Each item in this configuration
	 * (labelled by a key) is to contain the configuration for the view, a class that
	 * extends Ext.calendar.panel.Base. There are also other configurations
	 * available only when used in conjunction with this panel:
	 * 
	 * - `label` - A label to display on the switcher control
	 * - `weight` - A number to indicate the order in which items are
	 * displayed in the switcher.  Lower numbers are displayed first.
	 * - `titleTpl` - A template string for displaying the current date title.  The
	 * values passed are the start and end dates.
	 * 
	 * The default configuration:
	 * 
	 *     views: {
	 *         day: {
	 *             xtype: 'calendar-day',
	 *             titleTpl: '{start:date("l F d, Y")}',
	 *             controlStoreRange: false,
	 *             label: 'Day',
	 *             weight: 10,
	 *             dayHeader: null
	 *         },
	 *         week: {
	 *             xtype: 'calendar-week',
	 *             dayHeaderFormat: 'D d',
	 *             controlStoreRange: false,
	 *             titleTpl: '{start:date("j M")} - {end:date("j M Y")}',
	 *             label: 'Week',
	 *             weight: 20
	 *         },
	 *         month: {
	 *             xtype: 'calendar-month',
	 *             titleTpl: '{start:date("F Y")}',
	 *             label: 'Month',
	 *             weight: 30
	 *         }
	 *     }
	 * 
	 * Any view configuration options passed will override the default configuration.
	 * For example, to change the week view to show 5 days with the week beginning on
	 * Monday:
	 * 
	 *     views: {
	 *         week: {
	 *             visibleDays: 5,
	 *             firstDayOfWeek: 1,
	 *             label: 'Work Week'
	 *         }
	 *     }
	 * 
	 * With the above config the default day and month views will be rendered along
	 * with a modified week view with the text of "Work Week" in the view switcher
	 * control.
	 * 
	 * To prevent a default view from being displayed set the view config to `null`.
	 * For example, to hide the Month view:
	 * 
	 *     views: {
	 *         month: null
	 *     }
	 * 
	 * Any calendar views configured with keys other than "day", "week", and "month"
	 * will be included in addition to the default views.  For example, to show the
	 * modified work week view we configured above in addition to the default Day,
	 * Week, and Month views we would pass in the same config with a key of
	 * "workweek" (the can be anything you choose) along with a weight indicating the
	 * placement of the "Work Week" button in the switcher.
	 * 
	 *     views: {
	 *         workweek: {
	 *             visibleDays: 5,
	 *             firstDayOfWeek: 1,
	 *             label: 'Work Week',
	 *             weight: 25
	 *         }
	 *     }
	 * 
	 * Using the above config the Calendar would now have 4 views available and would
	 * display "Work Week" in the switcher control after "Week" and before "Month".
	 * 
	 * The configuration key will be the string used when specifying the
	 * cfg-defaultView as well as that passed to the method-setView
	 * method.  For example, using the last views config example the "worweek" would
	 * be shown using:
	 * 
	 *     CalendarInstance.setView('workweek');
	 * 
	 */
	views?: any

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar panels see Ext.calendar.panel.Base
 * 
 * A panel for display a Week. Composes a Ext.calendar.view.Week with a
 * Ext.calendar.header.Base.
 * 
 * The Week panel displays the week containing the current date (or the date
 * set on the cfg-value config).  The number of days configured on the
 * cfg-visibleDays config (defaults to 7) are displayed starting with the value
 * set on the cfg-firstDayOfWeek.
 * 
 * By default the first day is Sunday.  If you want to create a "work week" type view
 * where the weekend days are omitted you can modify the `visibleDays` and
 * `firstDayOfWeek` to show only Monday - Friday.
 * 
 *     store = new Ext.data.Store({
 *         autoLoad: true,
 *         proxy: {
 *             type: 'ajax',
 *             url: 'calendars.php'
 *         },
 *         eventStoreDefaults: {
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'events.php'
 *             }
 *         }
 *     });
 * 
 *     <Calendar_Week
 *         height={400}
 *         width={400}
 *         store={this.store}
 *         firstDayOfWeek="1" // starts the view on Monday
 *         visibleDays="5" // and displays it and the 4 days after
 *     />
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward one week.
 * 
 * i.e.  `panel.moveNext();` called on a 7-day view 1 week.  **Note** that a panel
 * configured with 5 `visibleDays` would not advance 5 days, but rather will show the
 * next full week with only 5 visible days.
 * 
 * ### Alternative Classes
 * 
 * To display fewer days consider using Ext.calendar.panel.Day or
 * Ext.calendar.panel.Days.
 * 
 */
declare class Calendar_Week extends React.Component<Calendar_WeekProps, any> { }
export interface Calendar_WeekProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	controlStoreRange?: any

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * A config for the Ext.calendar.header.Base. This can be
	 * configured directly on the panel.  The relevant configurations will be
	 * forwarded to the header.
	 * 
	 */
	dayHeader?: any

	/**
	 * The format to display the day in the header.
	 * 
	 */
	dayHeaderFormat?: string

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	eventRelayers?: any

	/**
	 * The day on which the calendar week begins. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#firstDayOfWeek
	 * 
	 */
	firstDayOfWeek?: number

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The start of the date range to show. The visible range of the view will begin
	 * at the firstDayOfWeek immediately preceding this value, or the value if
	 * it is the firstDayOfWeek. For example, using the following configuration:
	 * 
	 *      {
	 *          firstDayOfWeek: 0, // Sunday
	 *          value: new Date(2010, 2, 3) // Wed, 3 March 2010
	 *      }
	 * 
	 * The visible range would begin on Sun 28th Feb.
	 * 
	 */
	value?: any

	/**
	 * A config for the main calendar view. This can be configured directly on the panel,
	 * the relevant configurations will be forwarded to the view.
	 * 
	 */
	view?: any

	/**
	 * The number of days to show starting from the cfg-value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar panels see Ext.calendar.panel.Base
 * 
 * A panel for display a series of weeks. Composes a
 * Ext.calendar.view.Weeks with a
 * Ext.calendar.header.Base.
 * 
 * The Weeks panel shows the events for one or more weeks as full days similar to a
 * conventional calendar.  For a week view including an hourly timeline see
 * Ext.calendar.panel.Week.
 * 
 * The weeks panel shows the week containing the current date (or the date set on the
 * cfg-value config) plus any additional weeks totaling the
 * cfg-visibleWeeks.  The number of days shown per week is set using
 * cfg-visibleDays.  Each week begins on the day set on the
 * cfg-firstDayOfWeek.
 * 
 * By default the first day is Sunday.  If you want to create a "work week" type view
 * where the weekend days are omitted you can modify the `visibleDays` and
 * `firstDayOfWeek` to show only Monday - Friday.
 * 
 *     store = new Ext.data.Store({
 *         autoLoad: true,
 *         proxy: {
 *             type: 'ajax',
 *             url: 'calendars.php'
 *         },
 *         eventStoreDefaults: {
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'events.php'
 *             }
 *         }
 *     });
 * 
 *     <Calendar_Weeks
 *         height={400}
 *         width={400}
 *         store={this.store}
 *         firstDayOfWeek="1" // starts the view on Monday
 *         visibleDays="5" // and displays it and the 4 days after
 *     />
 * 
 * ### Calendar Events
 * 
 * Events show on the view with their start and end days correlating to the day
 * labels.  The events will display on the timeline according to your local timezone
 * offset from GMT.  The timezone offset can be applied explicitly using the
 * cfg-timezoneOffset config option.
 * 
 * ### Adding All Day Events
 * 
 * Dragging / swiping across multiple days will show the event add form with multiple
 * days pre-populated in the form's start / end dates.  A single all day type event can
 * be added by tapping / clicking on a single day.
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward the number of
 * cfg-visibleWeeks.
 * 
 * i.e.  `panel.moveNext();` called on a 7-day view with 2 visible weeks will advance the
 * view 2 weeks.  **Note** that a panel configured with 5 `visibleDays` would not advance
 * 5 days, but rather will show the next full week with only 5 visible days.
 * 
 * ### Alternative Classes
 * 
 * For a month view refer to Ext.calendar.view.Month.
 * 
 */
declare class Calendar_Weeks extends React.Component<Calendar_WeeksProps, any> { }
export interface Calendar_WeeksProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	addOnSelect?: boolean

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * Configure `true` to show an anchor element pointing to the target component when this Panel is
	 * by another component.
	 * 
	 */
	anchor?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * - `true` to enable the border around the panel body (as defined by the theme)
	 * Note that even when enabled, the bodyBorder is only visible when there are docked
	 * items around the edges of the panel.  Where the bodyBorder touches the panel's outer
	 * border it is automatically collapsed into a single border.
	 * 
	 * - `false` to disable the body border
	 * 
	 * - `null` - use the value of border as the value for bodyBorder
	 * 
	 */
	bodyBorder?: boolean

	/**
	 * A shortcut for setting a padding style on the body element. The value can either be
	 * a number to be applied to all sides, or a normal CSS string describing padding.
	 * 
	 */
	bodyPadding?: number | boolean | string

	/**
	 * Custom CSS styles to be applied to the panel's body element, which can be supplied
	 * as a valid CSS style string or an object containing style property name/value pairs.
	 * For example, these two formats are interpreted to be equivalent:
	 * 
	 *     bodyStyle: 'background:#ffc; padding:10px;'
	 * 
	 *     bodyStyle: {
	 *         background: '#ffc',
	 *         padding: '10px'
	 *     }
	 * 
	 */
	bodyStyle?: string | any

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * The buttons for this panel to be displayed in the `buttonToolbar` as a keyed
	 * object (or array) of button configuration objects.
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: {
	 *                 text: "OK",
	 *                 handler: this.onOK
	 *             }
	 *         }}
	 *     />
	 * 
	 * For buttons that are defined in `standardButtons` (such as `'ok'`), there is a
	 * more convenient short-hand for this config:
	 * 
	 *     <Panel
	 *         html="hello world"
	 *         padding={20}
	 *         buttons={{
	 *             ok: this.onOk,
	 *             cancel: this.onCancel
	 *         }}
	 *     />
	 * 
	 * The minButtonWidth is used as the default
	 * minWidth for the buttons in the buttons toolbar.
	 * 
	 */
	buttons?: any

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * True to display the 'close' tool button and allow the user to close the panel, false to hide the button and
	 * disallow closing the window.
	 * 
	 * By default, when close is requested by clicking the close button in the header, the method-close method will be
	 * called. This will _destroy_ the Panel and its content meaning that it may not be
	 * reused.
	 * 
	 * To make closing a Panel _hide_ the Panel so that it may be reused, set closeAction to 'hide'.
	 * 
	 */
	closable?: boolean

	/**
	 * The action to take when the close header tool is clicked:
	 * 
	 * - **`'method-destroy'`** :
	 * 
	 *   remove the window from the DOM and destroy it and all descendant
	 *   Components. The window will **not** be available to be redisplayed via the method-show method.
	 * 
	 * - **`'method-hide'`** :
	 * 
	 *   method-hide the window by setting visibility to hidden and applying negative offsets. The window will be
	 *   available to be redisplayed via the method-show method.
	 * 
	 * **Note:** This behavior has changed! setting *does* affect the method-close method which will invoke the
	 * appropriate closeAction.
	 * 
	 */
	closeAction?: string

	/**
	 * Text to be announced by screen readers when the
	 * **close** tool is focused.  Will also be set as the close
	 * tool's tooltip text.
	 * 
	 * **Note:** Applicable when the panel is closable: true
	 * 
	 */
	closeToolText?: string

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to start collapsed.
	 * 
	 */
	collapsed?: boolean

	/**
	 * A configuration for a Ext.panel.Collapser.
	 * 
	 * True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
	 * area.
	 * 
	 * You can also set `top`/`right`/`bottom`/`left` to directly specify the collapse direction.
	 * 
	 */
	collapsible?: string | boolean | any

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	controlStoreRange?: any

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	dayFormat?: boolean

	/**
	 * A config for the Ext.calendar.header.Base. This can be
	 * configured directly on the panel.  The relevant configurations will be
	 * forwarded to the header.
	 * 
	 */
	dayHeader?: any

	/**
	 * The format to display the day in the header.
	 * 
	 */
	dayHeaderFormat?: string

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	eventRelayers?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	firstDayOfWeek?: boolean

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * Pass as `false` to prevent a header from being created.
	 * 
	 * You may also assign a header with a config object (optionally containing an `xtype`)
	 * to custom-configure your panel's header.
	 * 
	 * See Ext.panel.Header for all the options that may be specified here.
	 * 
	 */
	header?: boolean | any

	/**
	 * The position of the header. Ignored if no cfg-header is created.
	 * 
	 */
	headerPosition?: string

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * Path to an image to use as an icon.
	 * 
	 * For instructions on how you can use icon fonts including those distributed in
	 * the SDK see iconCls.
	 * 
	 */
	icon?: string

	/**
	 * One or more space separated CSS classes to be applied to the icon element.
	 * The CSS rule(s) applied should specify a background image to be used as the
	 * icon.
	 * 
	 * An example of specifying a custom icon class would be something like:
	 * 
	 *     // specify the property in the config for the class:
	 *     iconCls: 'my-home-icon'
	 * 
	 *     // css rule specifying the background image to be used as the icon image:
	 *     .my-home-icon {
	 *         background-image: url(../images/my-home-icon.gif) !important;
	 *     }
	 * 
	 * In addition to specifying your own classes, you can use the font icons
	 * provided in the SDK using the following syntax:
	 * 
	 *     // using Font Awesome
	 *     iconCls: 'x-fa fa-home'
	 * 
	 *     // using Pictos
	 *     iconCls: 'pictos pictos-home'
	 * 
	 * Depending on the theme you're using, you may need include the font icon
	 * packages in your application in order to use the icons included in the
	 * SDK.  For more information see:
	 * 
	 *  - [Font Awesome icons](http://fortawesome.github.io/Font-Awesome/cheatsheet/)
	 *  - [Pictos icons](../guides/core_concepts/font_ext.html)
	 *  - [Theming Guide](../guides/core_concepts/theming.html)
	 * 
	 */
	iconCls?: string

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	overflowText?: boolean

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * A configuration for a Ext.panel.Resizer.
	 * 
	 */
	resizable?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Show an overflow label that will display an overlay when
	 * there are too many events to render in the view. Valid
	 * configurations are:
	 * - `top`
	 * - `bottom`
	 * 
	 * Pass `null` or `''` to not show overflow.
	 * The overflow text may be formatted using cfg-overflowText.
	 * 
	 */
	showOverflow?: string

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The title text or config object for the Ext.panel.Title component.
	 * 
	 */
	title?: string | any

	/**
	 * An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as
	 * child components of the header container.
	 * 
	 */
	tools?: any[] | any

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value for the current view.
	 * 
	 *     value: new Date('10-02-2016') // to set the date to Oct 2nd 2016
	 * 
	 */
	value?: any

	/**
	 * A config for the main calendar view. This can be configured directly on the panel,
	 * the relevant configurations will be forwarded to the view.
	 * 
	 */
	view?: any

	/**
	 * The number of days to show in a week, starting from the firstDayOfWeek.
	 * For example, to show the view with days `Mon - Fri`, use:
	 * 
	 *      {
	 *          visibleDays: 5,
	 *          firstDayOfWeek: 1 // Monday
	 *      }
	 * 
	 */
	visibleDays?: number

	/**
	 * The number of weeks to show in this view.
	 * 
	 */
	visibleWeeks?: number

	/**
	 * The days of the week that are the weekend. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#weekendDays.
	 * 
	 */
	weekendDays?: number[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before collapse starts. Return `false` to cancel collapse.
	 * 
	 */
	onBeforeCollapse?: (me: any) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fires before expand starts. Return `false` to cancel expand.
	 * 
	 */
	onBeforeExpand?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires before resize starts. Return `false` to cancel dragging.
	 * 
	 */
	onBeforeResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the collapse starts.
	 * 
	 */
	onCollapse?: (me: any) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires then the drawer hides.
	 * 
	 */
	onDrawerHide?: (me: any) => void

	/**
	 * Fires then the drawer shows.
	 * 
	 */
	onDrawerShow?: (me: any) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when the expand starts.
	 * 
	 */
	onExpand?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * Fires for each tick while a drag is active.
	 * 
	 */
	onResizeDrag?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is cancelled.
	 * 
	 */
	onResizeDragCancel?: (me: any, context: any) => void

	/**
	 * Fires when the drag resize is complete.
	 * 
	 */
	onResizeDragEnd?: (me: any, context: any) => void

	/**
	 * Fires when the resize starts.
	 * 
	 */
	onResizeDragStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * The Day view operates the same as its parent Ext.calendar.view.Days view
 * with one notable difference: the cfg-visibleDays for the Day view is `1`
 * resulting in only a single day displayed at a time.
 * 
 * ### Alternative Classes
 * 
 * If your view requires a header showing the date displayed consider using
 * Ext.calendar.panel.Day instead.  To display more than a single day consider
 * using the Ext.calendar.view.Days or Ext.calendar.view.Week views.
 * 
 */
declare class Calendar_DayView extends React.Component<Calendar_DayViewProps, any> { }
export interface Calendar_DayViewProps extends FlexibleProps {

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * A formatting function for more complex displays of time values in the time
	 * gutter.
	 * 
	 */
	timeRenderer?: Function

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value to start the view from. The events displayed on this
	 * view are configured by the value and the visibleDays.
	 * 
	 */
	value?: any

	/**
	 * The number of days to show starting from the cfg-value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event editForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * The Days view displays events for multiple days with the time of day along the y axis.
 * The view will display the current date as the first day displayed unless configured
 * with a different date cfg-value.  The number of days displayed can be set
 * using the cfg-visibleDays config option.  By default, the calendar hours are
 * displayed as a 24 hour clock and are constrained to 8 (8:00am) and 20 (8:00pm).  The
 * beginning and end hour can be set using the cfg-startTime and
 * cfg-endTime configs.  The time displayed on the timeline may be customized
 * using either the cfg-timeFormat or cfg-timeRenderer config options.
 * 
 * Below are some of the distinctions to the Days view (and generally its subclasses).
 * 
 * ### Current Local Time
 * 
 * The current local time (when the current date is displayed) will be shown on the view
 * as a thin marker on the day's timeline.  The current time marker can be set using the
 * cfg-showNowMarker option.
 * 
 * ### Calendar Events
 * 
 * Events show on the timeline with their start and end times correlating to the time
 * labels.  The events will display on the timeline according to your local timezone
 * offset from GMT.  The timezone offset can be applied explicitly using the
 * cfg-timezoneOffset config option.  The exception being all day or multi-day
 * events.  All day / multi-day events will show up at the top of the view in a dedicated
 * space preceding the view's start time.
 * 
 * ### Adding All Day Events
 * 
 * In addition to being able to drag / swipe across a day's timeline to show the event
 * add form, an all day type event can be quickly added by tapping / clicking on the
 * dedicated all day row displayed above the start hour.  This is the same dedicated
 * space used to display existing all day events.
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward the number of days set on the
 * cfg-visibleDays config.
 * 
 * ### Alternative Classes
 * 
 * If your view requires a header showing the dates displayed consider using
 * Ext.calendar.panel.Days instead.  To display a single day consider using the
 * Ext.calendar.view.Day view or Ext.calendar.view.Week to view a week at
 * a time.
 * 
 */
declare class Calendar_DaysView extends React.Component<Calendar_DaysViewProps, any> { }
export interface Calendar_DaysViewProps extends FlexibleProps {

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * A formatting function for more complex displays of time values in the time
	 * gutter.
	 * 
	 */
	timeRenderer?: Function

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value to start the view from. The events displayed on this
	 * view are configured by the value and the visibleDays.
	 * 
	 */
	value?: any

	/**
	 * The number of days to show starting from the cfg-value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event editForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * The Month view shows events over an entire month.  The view shows a summary of the
 * events that occur on each day.  The month view uses the current date (or the date set
 * on the cfg-value config) to determine the month to show.
 * 
 * The Month view displays (as needed) days from trailing/leading months as required to
 * fill the space in the view based on the cfg-value and the
 * cfg-firstDayOfWeek.  In the following example, the view will start on Sun Dec
 * 27 and conclude on Sat Feb 6 because we require 6 rows to display the month of
 * January.
 * 
 *      {
 *          value: new Date(2010, 0, 1) // Fri
 *          firstDayOfWeek: 0 // Sunday
 *      }
 * 
 * The cfg-visibleWeeks can be specified as `null` to allow the view to
 * calculate the appropriate number of rows to show in the view, as this varies
 * from month to month.  This defaults to the largest possible value (6 weeks) so that
 * the view size is consistent across months.
 * 
 * ### Date Range Navigation
 * 
 * In addition to cfg-navigate, cfg-movePrevious, and
 * cfg-moveNext the Month view let you quickly navigate between months and
 * years.  The cfg-previousMonth and cfg-nextMonth methods allow for
 * programmatic month-to-month navigation while cfg-previousYear and
 * cfg-nextYear navigate the view across years.
 * 
 * ### Alternative Classes
 * 
 * If your view requires a header showing the days of the week consider using
 * Ext.calendar.panel.Weeks instead.  For a multi-week view refer to
 * Ext.calendar.view.Weeks.
 * 
 */
declare class Calendar_MonthView extends React.Component<Calendar_MonthViewProps, any> { }
export interface Calendar_MonthViewProps extends FlexibleProps {

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	addOnSelect?: boolean

	/**
	 * `true` to allow days to be selected via the UI.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The format for displaying the day in the cell.
	 * See Ext.Date for options.
	 * 
	 */
	dayFormat?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	/**
	 * The day on which the calendar week begins. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#firstDayOfWeek
	 * 
	 */
	firstDayOfWeek?: number

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * Text to show when events overflow on a particular day to allow the user to view
	 * the rest. This string is evaluated as a formatted string where the argument is
	 * the number of overflowing events. Depends on cfg-showOverflow.
	 * 
	 */
	overflowText?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Show an overflow label that will display an overlay when
	 * there are too many events to render in the view. Valid
	 * configurations are:
	 * - `top`
	 * - `bottom`
	 * 
	 * Pass `null` or `''` to not show overflow.
	 * The overflow text may be formatted using cfg-overflowText.
	 * 
	 */
	showOverflow?: string

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The current month to show. The value will default to the
	 * first date of the configured month.  For example:
	 * 
	 *      calendar.setValue(new Date(2010, 0, 13));
	 *      console.log(calendar.getValue()); // -> 2010-01-01
	 * 
	 */
	value?: any

	/**
	 * The number of days to show in a week, starting from the firstDayOfWeek.
	 * For example, to show the view with days `Mon - Fri`, use:
	 * 
	 *      {
	 *          visibleDays: 5,
	 *          firstDayOfWeek: 1 // Monday
	 *      }
	 * 
	 */
	visibleDays?: number

	/**
	 * The number of weeks to show in this view. If specified as `null`, the view will generate the appropriate
	 * number of rows to display a full month based on the passed cfg-value. In a majority of cases,
	 * this will be 5, however some months will only require 4, while others will need 6. Defaults to the
	 * largest value to keep the view size consistent.
	 * 
	 */
	visibleWeeks?: number

	/**
	 * The days of the week that are the weekend. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#weekendDays.
	 * 
	 */
	weekendDays?: number[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event editForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fired when a single date is selected.
	 * 
	 */
	onSelect?: (me: any, context: any) => void

	/**
	 * Fired when a date range is selected.
	 * 
	 */
	onSelectRange?: (me: any, context: any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * This view is used to wrap multiple calendar panels and allows switching between and
 * communicating with them through a single interface. This class does not provide any
 * additional UI functionality.  That is provided by Ext.calendar.panel.Panel
 * which wraps this component.
 * 
 * Sample Multi view
 * 
 *     Ext.create({
 *         xtype: 'calendar-multiview',
 *         renderTo: Ext.getBody(),
 *         height: 400,
 *         width: 400,
 *         store: {
 *             autoLoad: true,
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'calendars.php'
 *             },
 *             eventStoreDefaults: {
 *                 proxy: {
 *                     type: 'ajax',
 *                     url: 'events.php'
 *                 }
 *             }
 *         },
 *         views: {
 *             day: {
 *                 xtype: 'calendar-day'
 *             },
 *             week: {
 *                 xtype: 'calendar-week'
 *             },
 *             month: {
 *                 xtype: 'calendar-month'
 *             }
 *         },
 *         defaultView: 'day'
 *     });
 * 
 * In the previous example we've detailed the calendar panel types we're interested in
 * having contained within the multi view using the cfg-views config option.
 * The key specified for each calendar panel will be used when specifying the initial
 * cfg-defaultView as well as when setting the current view at runtime using
 * the method-setView method.
 * 
 * The following Multi view configs will be applied to any calendar panel in the views
 * config:
 * 
 *  - cfg-compact
 *  - cfg-compactOptions
 *  - cfg-store
 *  - cfg-timezoneOffset
 *  - cfg-value
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext move the active view backward
 * and forward.  The amount moved depends on the current view type.
 * 
 * ### Alternative Classes
 * 
 * If you require UI controls for navigating views and toggling the visibility of events
 * per source calendar consider Ext.calendar.panel.Panel.
 * Ext.calendar.panel.Panel wraps the Multi view and provides navigational controls.
 * 
 */
declare class Calendar_MultiView extends React.Component<Calendar_MultiViewProps, any> { }
export interface Calendar_MultiViewProps extends FlexibleProps {

	/**
	 * The item from the cfg-items collection that will be active first. This is
	 * usually only meaningful in a Ext.layout.Card, where only one item can be active at a
	 * time. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.
	 * 
	 */
	activeItem?: any | string | number

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, children will be destroyed as soon as they are removed
	 * from this container.
	 * 
	 */
	autoDestroy?: boolean

	/**
	 * May be set to `false` for improved layout performance if auto-sizing is not required.
	 * 
	 * Some versions of Safari, both desktop and mobile, have very slow performance
	 * if the application has deeply nested containers due to the following WebKit
	 * bug: https://bugs.webkit.org/show_bug.cgi?id=150445
	 * 
	 * Applications that experience performance issues in the affected versions of
	 * Safari may need to turn off autoSizing globally for all `Ext.Container` instances
	 * by placing the following override in the application's "overrides" directory:
	 * 
	 *     Ext.define('MyApp.overrides.Container', {
	 *         override: 'Ext.Container',
	 *         config: {
	 *             autoSize: false
	 *         }
	 *     });
	 * 
	 * Once auto-sizing support has turned off by default, it can be selectively
	 * turned back on only on those container instances that explicitly need auto-sizing
	 * behavior by setting `autoSize` to `true`.
	 * 
	 * This option can also be used to allow children to be sized in percentage
	 * units as a workaround for the following browser bug:
	 * https://bugs.webkit.org/show_bug.cgi?id=137730
	 * 
	 * To illustrate, the following example should render a 200px by 200px green box
	 * (the container) with a yellow box inside of it (the child item).  The child
	 * item's height and width are both set to `'50%'` so the child should render
	 * exactly 100px by 100px in size.
	 * 
	 *     <Container
	 *         height={200}
	 *         width={200}
	 *         style="background: green"
	 *     >
	 *         <Component
	 *             style="background: yellow"
	 *             height="50%"
	 *             width="50%"
	 *         />
	 *     </Container>
	 * 
	 * All browsers except for Safari render the previous example correctly, but
	 * Safari does not assign a height to the component.  To make percentage-sized
	 * children work in Safari, simply set `autoSize` to `false` on the container.
	 * 
	 * Since the underlying implementation works by absolutely positioning the container's
	 * body element, this option can only be used when the container is not
	 * "shrink wrapping" the content in either direction.  When `autoSize` is
	 * set to `false`, shrink wrapped dimension(s) will collapse to 0.
	 * 
	 */
	autoSize?: boolean

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to
	 * 'right' for buttons/fbar, 'left' for other toolbar types).
	 * 
	 * **NOTE:** The preferred way to specify toolbars is to use the items config specifying the docked
	 * config on the item. Instead of buttonAlign you would add the layout: { pack: 'start' | 'center' | 'end' }
	 * option to the docked item config.
	 * 
	 */
	buttonAlign?: string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * The compact config is applied to all configured cfg-views.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * The compactOptions config is applied to all configured cfg-views.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * 
	 * Specifies a child Component to receive focus when this Container's method-focus
	 * method is called. Should be a valid Ext.ComponentQuery selector.
	 * 
	 */
	defaultFocus?: string

	/**
	 * A set of default configurations to apply to all child Components in this Container.
	 * 
	 * It's often useful to specify defaults when creating more than one children with similar configurations. For
	 * example here we can specify that each child has a height of 20px and avoid repeating the declaration for each
	 * one:
	 * 
	 *     <Container
	 *         fullscreen
	 *         defaults={{
	 *             height: 20
	 *         }}
	 *     >
	 *         <Panel>Panel 1</Panel>
	 *         <Panel>Panel 2</Panel>
	 *     </Container>
	 * 
	 */
	defaults?: any

	/**
	 * The default Ext.Component of child Components to create in this Container when a child item
	 * is specified as a raw configuration object, rather than as an instantiated Component.
	 * 
	 */
	defaultType?: string

	/**
	 * The key of the item from views to use as the default.
	 * 
	 */
	defaultView?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * Configuration options to make this Component draggable
	 * 
	 */
	draggable?: any

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * Configuration for this Container's layout. Example:
	 * 
	 *     <Container
	 *         layout={{
	 *             type: "hbox",
	 *             align: "middle"
	 *         }}
	 *     >
	 *         <Panel
	 *             html="hello"
	 *             flex={1}
	 *             bodyStyle={{
	 *                 background: "#000",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *         <Panel
	 *             html="world"
	 *             flex={2}
	 *             bodyStyle={{
	 *                 background: "#f00",
	 *                 color: "#fff"
	 *             }}
	 *         />
	 *     </Container>
	 * 
	 */
	layout?: any | string

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * A configuration to allow you to mask this container.
	 * You can optionally pass an object block with and xtype of `loadmask`, and an optional `message` value to
	 * display a loading mask. Please refer to the Ext.LoadMask component to see other configurations.
	 * 
	 *     <Container
	 *         html="Hello World"
	 *         masked={{
	 *             xtype: "loadmask",
	 *             message: "My Message"
	 *         }}
	 *     />
	 * 
	 * Alternatively, you can just call the setter at any time with `true`/`false` to show/hide the mask:
	 * 
	 *     setMasked(true); //show the mask
	 *     setMasked(false); //hides the mask
	 * 
	 * There are also two convenient methods, method-mask and unmask, to allow you to mask and unmask
	 * this container at any time.
	 * 
	 */
	masked?: boolean | any

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default
	 * value for the Ext.Button#minWidth config of each Button added to the **footer toolbar** via the
	 * fbar or buttons configurations. It will be ignored for buttons that have a minWidth configured
	 * some other way, e.g. in their own config object or via the defaults of
	 * their parent container.
	 * 
	 */
	minButtonWidth?: number

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * The store config is applied to all configured cfg-views.
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * The timezoneOffset config is applied to all configured cfg-views.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The value for the current view.
	 * 
	 *     value: new Date('10-02-2016') // to set the date to Oct 2nd 2016
	 * The value config is applied to all configured cfg-views.
	 * 
	 */
	value?: any

	/**
	 * The calendar views to have available, each item in this configuration
	 * (labelled by a key) is to contain the configuration for the view, a class that
	 * extends Ext.calendar.panel.Base.
	 * 
	 * Example with a day and week view:
	 * 
	 *     views: {
	 *         day: {
	 *             xtype: 'calendar-day'
	 *         },
	 *         week: {
	 *             xtype: 'calendar-week'
	 *         }
	 *     }
	 * 
	 * The "day" and "week" keys would be the eligible values for the
	 * cfg-defaultView and the param string to pass to
	 * method-setView.
	 * 
	 */
	views?: any

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * If set to `true`, then child cfg!items may be specified as a object,
	 * with each property name specifying an cfg!itemId, and the property
	 * value being the child item configuration object.
	 * 
	 * When using this scheme, each child item may contain a cfg!weight
	 * configuration value which affects its order in this container. Lower weights
	 * are towards the start, higher weights towards the end.
	 * 
	 */
	weighted?: boolean

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires whenever item within the Container is activated.
	 * 
	 */
	onActivate?: (newActiveItem: any, me: any, oldActiveItem: any) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * Fires whenever item added to the Container.
	 * 
	 */
	onAdd?: (me: any, item: any, index: number) => void

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!activeItem` changes.
	 */
	onBeforeActiveItemChange?: (sender: any, value: any | string | number, oldValue: any | string | number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever item within the Container is deactivated.
	 * 
	 */
	onDeactivate?: (oldActiveItem: any, me: any, newActiveItem: any) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires whenever item moved within the Container.
	 * 
	 */
	onMove?: (me: any, item: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires whenever item removed from the Container.
	 * 
	 */
	onRemove?: (me: any, item: any, index: number) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * The Week view displays the week containing the current date (or the date
 * set on the cfg-value config).  The number of days configured on the
 * cfg-visibleDays config (defaults to 7) are displayed starting with the value
 * set on the cfg-firstDayOfWeek.
 * 
 * By default the first day is Sunday.  If you want to create a "work week" type view
 * where the weekend days are omitted you can modify the `visibleDays` and
 * `firstDayOfWeek` to show only Monday - Friday.
 * 
 *     Ext.create({
 *         xtype: 'calendar-weekview',
 *         renderTo: Ext.getBody(),
 *         height: 400,
 *         width: 400,
 *         firstDayOfWeek: 1,  // starts the view on Monday
 *         visibleDays: 5,     // and displays it and the 4 days after
 *         store: {
 *             autoLoad: true,
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'calendars.php'
 *             },
 *             eventStoreDefaults: {
 *                 proxy: {
 *                     type: 'ajax',
 *                     url: 'events.php'
 *                 }
 *             }
 *         }
 *     });
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward one week.
 * 
 * i.e.  `view.moveNext();` called on a 7-day view 1 week.  **Note** that a view
 * configured with 5 `visibleDays` would not advance 5 days, but rather will show the
 * next full week with only 5 visible days.
 * 
 * ### Alternative Classes
 * 
 * If your view requires a header showing the dates displayed consider using
 * Ext.calendar.panel.Week instead.  To display fewer days consider using the
 * Ext.calendar.view.Day or Ext.calendar.view.Days view.
 * 
 */
declare class Calendar_WeekView extends React.Component<Calendar_WeekViewProps, any> { }
export interface Calendar_WeekViewProps extends FlexibleProps {

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to allow selection in the UI to create events. This includes being able
	 * to drag-select a range in the all day area, as well as click/tap in the day
	 * area (the dedicated space just above the start time's row) to create an event.
	 * 
	 * See method-showAddForm for adding an event when selection is
	 * disabled.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * When displaying events, allow events that intersect to horizontally overlap to
	 * save on horizontal space.
	 * 
	 */
	displayOverlap?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The hour number to end this view. Should be a value between `1` and `24`.
	 * 
	 */
	endTime?: number

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	/**
	 * The day on which the calendar week begins. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#firstDayOfWeek
	 * 
	 */
	firstDayOfWeek?: number

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * `true` to allow events in the day area to be resized.
	 * 
	 */
	resizeEvents?: boolean

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * `true` to show a marker on the view that equates to the current local time.
	 * 
	 */
	showNowMarker?: boolean

	/**
	 * The hour number to start this view. Should be a value between `0` and `23`.
	 * 
	 */
	startTime?: number

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The format to display the time values in the time gutter.
	 * 
	 * Refer to the class description of Ext.Date for formatting options.
	 * 
	 * Example format for displaying a 12-hour time with an am/pm suffix:
	 * 
	 *     timeFormat: 'h:ia' // displays 14:00 hours as 2:00pm
	 * 
	 */
	timeFormat?: string

	/**
	 * A formatting function for more complex displays of time values in the time
	 * gutter.
	 * 
	 */
	timeRenderer?: Function

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The start of the date range to show. The visible range of the view will begin
	 * at the firstDayOfWeek immediately preceding this value, or the value if
	 * it is the firstDayOfWeek. For example, using the following configuration:
	 * 
	 *      {
	 *          firstDayOfWeek: 0, // Sunday
	 *          value: new Date(2010, 2, 3) // Wed, 3 March 2010
	 *      }
	 * 
	 * The visible range would begin on Sun 28th Feb.
	 * 
	 */
	value?: any

	/**
	 * The number of days to show starting from the cfg-value.
	 * 
	 */
	visibleDays?: number

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event editForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * Fired before an event resize begins. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onBeforeEventResizeStart?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the cfg-droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event resize is complete.
	 * Depends on the cfg-resizeEvents config.
	 * 
	 */
	onEventResize?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the cfg-droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is resized on this view, allows the resize
	 * to be validated. Depends on the cfg-resizeEvents config.
	 * 
	 */
	onValiDateEventResize?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}

/**
 * 
 * For an overview of calendar views see Ext.calendar.view.Base
 * 
 * The Weeks view shows the events for one or more weeks as full days similar to a
 * conventional calendar.  For a week view including an hourly timeline see
 * Ext.calendar.view.Week.
 * 
 * The weeks view shows the week containing the current date (or the date set on the
 * cfg-value config) plus any additional weeks totaling the
 * cfg-visibleWeeks.  The number of days shown per week is set using
 * cfg-visibleDays.  Each week begins on the day set on the
 * cfg-firstDayOfWeek.
 * 
 * By default the first day is Sunday.  If you want to create a "work week" type view
 * where the weekend days are omitted you can modify the `visibleDays` and
 * `firstDayOfWeek` to show only Monday - Friday.
 * 
 *     Ext.create({
 *         xtype: 'calendar-weeksview',
 *         renderTo: Ext.getBody(),
 *         height: 400,
 *         width: 400,
 *         firstDayOfWeek: 1,  // starts the view on Monday
 *         visibleDays: 5,     // and displays it and the 4 days after
 *         store: {
 *             autoLoad: true,
 *             proxy: {
 *                 type: 'ajax',
 *                 url: 'calendars.php'
 *             },
 *             eventStoreDefaults: {
 *                 proxy: {
 *                     type: 'ajax',
 *                     url: 'events.php'
 *                 }
 *             }
 *         }
 *     });
 * 
 * ### Calendar Events
 * 
 * Events show on the view with their start and end days correlating to the day
 * labels.  The events will display on the timeline according to your local timezone
 * offset from GMT.  The timezone offset can be applied explicitly using the
 * cfg-timezoneOffset config option.
 * 
 * ### Adding All Day Events
 * 
 * Dragging / swiping across multiple days will show the event add form with multiple
 * days pre-populated in the form's start / end dates.  A single all day type event can
 * be added by tapping / clicking on a single day.
 * 
 * ### Date Range Navigation
 * 
 * The cfg-movePrevious and cfg-moveNext methods modify the displayed
 * date range by moving the range forward or backward the number of
 * cfg-visibleWeeks.
 * 
 * i.e.  `view.moveNext();` called on a 7-day view with 2 visible weeks will advance the
 * view 2 weeks.  **Note** that a view configured with 5 `visibleDays` would not advance
 * 5 days, but rather will show the next full week with only 5 visible days.
 * 
 * ### Alternative Classes
 * 
 * If your view requires a header showing the days of the week consider using
 * Ext.calendar.panel.Weeks instead.  For a month view refer to
 * Ext.calendar.view.Month.
 * 
 */
declare class Calendar_WeeksView extends React.Component<Calendar_WeeksViewProps, any> { }
export interface Calendar_WeeksViewProps extends FlexibleProps {

	/**
	 * The configuration for the Ext.calendar.form.Add to be used
	 * when an event is to be created.  Use `null` to disable creation.
	 * 
	 */
	addForm?: any

	/**
	 * `true` to show the cfg-addForm when a selection is made on the body.
	 * 
	 * Use cfg-addOnSelect to control view selection itself.
	 * 
	 */
	addOnSelect?: boolean

	/**
	 * `true` to allow days to be selected via the UI.
	 * 
	 */
	allowSelection?: boolean

	/**
	 * An object containing ARIA attributes to be set
	 * on this Component's ARIA element. Use this to set the attributes that cannot be
	 * determined by the Component's state, such as `aria-live`, `aria-flowto`, etc.
	 * 
	 * **Note** that this config is only meaningful at the Component rendering time,
	 * and setting it after that will do nothing.
	 * 
	 */
	ariaAttributes?: any

	/**
	 * DOM selector for a child element that is to be used
	 * as description for this Component, set in `aria-describedby` attribute.
	 * The selector works the same way as ariaLabelledBy.
	 * 
	 */
	ariaDescribedBy?: string

	/**
	 * ARIA label for this Component. It is best to use
	 * ariaLabelledBy option instead, because screen readers prefer
	 * `aria-labelledby` attribute to `aria-label`. ariaLabel and
	 * ariaLabelledBy config options are mutually exclusive.
	 * 
	 */
	ariaLabel?: string

	/**
	 * DOM selector for a child element that is to be used
	 * as label for this Component, set in `aria-labelledby` attribute.
	 * If the selector is by `#id`, the label element can be any existing element,
	 * not necessarily a child of the main Component element.
	 * 
	 * ariaLabelledBy and ariaLabel config options are
	 * mutually exclusive, and `ariaLabelledBy` has the higher precedence.
	 * 
	 */
	ariaLabelledBy?: string

	/**
	 * If `true`, then, when showBy or alignTo fallback on
	 * constraint violation only takes place along the major align axis.
	 * 
	 * That is, if alignment `"l-r"` is being used, and `axisLock: true` is used, then if constraints
	 * fail, only fallback to `"r-l"` is considered.
	 * 
	 */
	axisLock?: boolean

	/**
	 * 
	 * Enables or disables bordering on this component.
	 * The following values are accepted:
	 * 
	 * - `null` or `true (default): Do nothing and allow the border to be specified by the theme.
	 * - `false`: suppress the default border provided by the theme.
	 * 
	 * Please note that enabling bordering via this config will not add a `border-color`
	 * or `border-style` CSS property to the component; you provide the `border-color`
	 * and `border-style` via CSS rule or style configuration
	 * (if not already provide by the theme).
	 * 
	 */
	border?: boolean

	/**
	 * The absolute bottom position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	bottom?: number | string

	/**
	 * Configure this as `true` to have this Component centered within its Container.
	 * Setting this value to `true` will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	centered?: boolean

	/**
	 * The CSS class to add to this widget's element, in
	 * addition to the baseCls. In many cases, this property will be specified
	 * by the derived widget class. See userCls for adding additional CSS
	 * classes to widget instances (such as items in a Ext.Container).
	 * 
	 */
	cls?: string | string[]

	/**
	 * `true` to display this view in compact mode, typically used
	 * for smaller form factors.  Setting to `true` applies any configured
	 * cfg-compactOptions.
	 * 
	 */
	compact?: boolean

	/**
	 * A series of config options for this class to set when this class is in
	 * cfg-compact mode.
	 * 
	 */
	compactOptions?: any

	/**
	 * The configured element will automatically be
	 * added as the content of this component. When you pass a string, we expect it to be an element id.
	 * If the content element is hidden, we will automatically show it.
	 * 
	 */
	contentEl?: any | HTMLElement | string

	/**
	 * The initial set of data to apply to the `tpl` to
	 * update the content area of the Component.
	 * 
	 */
	data?: any

	/**
	 * The format for displaying the day in the cell.
	 * See Ext.Date for options.
	 * 
	 */
	dayFormat?: string

	/**
	 * Whether or not this component is disabled
	 * 
	 */
	disabled?: boolean

	/**
	 * The dock position of this component in its container. Can be `left`, `top`, `right` or `bottom`.
	 * 
	 * __Notes__
	 * 
	 * You must use a HTML5 doctype for docked `bottom` to work. To do this, simply add the following code to the HTML file:
	 * 
	 *     <!doctype html>
	 * 
	 * So your index.html file should look a little like this:
	 * 
	 *     <!doctype html>
	 *     <html>
	 *         <head>
	 *             <title>MY application title</title>
	 *             ...
	 * 
	 */
	docked?: string

	/**
	 * `true` to allows events to be dragged from this view.
	 * 
	 */
	draggable?: boolean

	/**
	 * `true` to allows events to be dropped on this view.
	 * 
	 */
	droppable?: boolean

	/**
	 * The configuration for the Ext.calendar.form.Edit to be used
	 * when an event is to be modified. Use `null` to disable editing.
	 * 
	 */
	editForm?: any

	/**
	 * The default configuration for Ext.calendar.Event widgets
	 * 
	 */
	eventDefaults?: any

	/**
	 * The day on which the calendar week begins. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#firstDayOfWeek
	 * 
	 */
	firstDayOfWeek?: number

	/**
	 * CSS class that will be added to focused
	 * component's focusClsEl, and removed when component blurs.
	 * 
	 */
	focusCls?: string

	/**
	 * Force the component to take up 100% width and height available, by adding it
	 * to Ext.Viewport.
	 * 
	 */
	fullscreen?: boolean

	/**
	 * Allow the view to have the value (displayed date range) changed via swipe
	 * navigation on devices that support it
	 * 
	 */
	gestureNavigation?: boolean

	/**
	 * The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	height?: number | string

	/**
	 * Whether or not this Component is hidden (its CSS `display` property is set to `none`).
	 * 
	 * Defaults to `true` for floated Components.
	 * 
	 */
	hidden?: boolean

	/**
	 * Animation effect to apply when the Component is being hidden.  Typically you want to use an
	 * outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	hideAnimation?: string | any

	/**
	 * When using a cfg!modal Component, setting this to `true`
	 * will hide the modal mask and the Container when the mask is tapped on.
	 * 
	 */
	hideOnMaskTap?: boolean

	/**
	 * Optional HTML content to render inside this Component, or a reference
	 * to an existing element on the page.
	 * 
	 */
	html?: string | any | HTMLElement

	/**
	 * An object containing handlers for keyboard events. The property names of this
	 * object are the key name and any modifiers. The values of the properties are the
	 * descriptors of how to handle each event.
	 * 
	 * The handler descriptor can be simply the handler function (either the
	 * literal function or the method name), or it can be an object with these
	 * properties:
	 * 
	 *  - `handler`: The function or its name to call to handle the event.
	 *  - `scope`: The this pointer context (can be "this" or "controller").
	 *  - `event`: An optional override of the key event to which to listen.
	 * 
	 * **Important:** Calls to `setKeyMap` do not replace the entire `keyMap` but
	 * instead update the provided mappings. That is, unless `null` is passed as the
	 * value of the `keyMap` which will clear the `keyMap` of all entries.
	 * 
	 */
	keyMap?: any

	/**
	 * Enables or disables processing keys in the `keyMap`. This value starts as
	 * `null` and if it is `null` when `initKeyMap` is called, it will automatically
	 * be set to `true`. Since `initKeyMap` is called by `Ext.Component` at the
	 * proper time, this is not something application code normally handles.
	 * 
	 */
	keyMapEnabled?: boolean

	/**
	 * The absolute left position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	left?: number | string

	/**
	 * 
	 * A config object containing one or more event handlers to be added to this object during initialization. This
	 * should be a valid listeners config object as specified in the
	 * addListener example for attaching
	 * multiple handlers at once.
	 * 
	 * **DOM events from Ext JS Ext.Component**
	 * 
	 * While _some_ Ext JS Component classes export selected DOM events (e.g. "click", "mouseover" etc), this is usually
	 * only done when extra value can be added. For example the DataView's **`itemclick`** event passing the node clicked on. To access DOM events directly from a
	 * child element of a Component, we need to specify the `element` option to identify the Component property to add a
	 * DOM listener to:
	 * 
	 *     new Ext.panel.Panel({
	 *         width: 400,
	 *         height: 200,
	 *         dockedItems: [{
	 *             xtype: 'toolbar'
	 *         }],
	 *         listeners: {
	 *             click: {
	 *                 element: 'el', //bind to the underlying el property on the panel
	 *                 fn: function(){ console.log('click el'); }
	 *             },
	 *             dblclick: {
	 *                 element: 'body', //bind to the underlying body property on the panel
	 *                 fn: function(){ console.log('dblclick body'); }
	 *             }
	 *         }
	 *     });
	 * 
	 */
	listeners?: any

	/**
	 * The margin to use on this Component. Can be specified as a number (in which case
	 * all edges get the same margin) or a CSS string like '5 10 10 10'
	 * 
	 */
	margin?: number | string

	/**
	 * The maximum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxHeight?: number | string

	/**
	 * The maximum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * Note that this config will not apply if the Component is 'positioned' (absolutely positioned or centered)
	 * 
	 */
	maxWidth?: number | string

	/**
	 * The minimum height of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minHeight?: number | string

	/**
	 * The minimum width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	minWidth?: number | string

	/**
	 * `true` to make this Component modal. This will create a mask underneath the Component
	 * that covers its parent and does not allow the user to interact with any other Components until this
	 * Component is dismissed.
	 * 
	 */
	modal?: boolean

	/**
	 * Name for the widget to be used with Ext.Container#lookupName et al.
	 * 
	 */
	name?: string

	/**
	 * Text to show when events overflow on a particular day to allow the user to view
	 * the rest. This string is evaluated as a formatted string where the argument is
	 * the number of overflowing events. Depends on cfg-showOverflow.
	 * 
	 */
	overflowText?: string

	/**
	 * The padding to use on this Component. Can be specified as a number (in which
	 * case all edges get the same padding) or a CSS string like '5 10 10 10'
	 * 
	 */
	padding?: number | string

	/**
	 * An object or array of objects that will provide custom functionality for this
	 * component. If a string is provided or a string is one of the elements of the
	 * array, that string is treated as the `type` alias. For example, "listpaging"
	 * is the type alias for `Ext.plugin.ListPaging`. The full alias includes the
	 * "plugin." prefix (i.e., 'plugin.listpaging').
	 * 
	 * Plugins should derive from `Ext.plugin.Abstract` but this is not required. The
	 * only requirement for a valid plugin is that it contain an `init()` method that
	 * accepts a reference to the owning component.
	 * 
	 * When a component is created, if any plugins are available, the component will
	 * call the `init` method on each plugin,
	 * passing a reference to itself. Each plugin can then call methods or respond to
	 * events on the component as needed to provide its functionality.
	 * 
	 * ## Example code
	 * 
	 * A plugin by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: 'listpaging'
	 *      });
	 * 
	 * Multiple plugins by alias:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: ['listpaging', 'pullrefresh']
	 *      });
	 * 
	 * Single plugin by class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }
	 *      });
	 * 
	 * Multiple plugins by type and class name with config options:
	 * 
	 *      var list = Ext.create({
	 *          xtype: 'list',
	 *          itemTpl: '<div class="item">{title}</div>',
	 *          store: 'Items',
	 * 
	 *          plugins: [{
	 *              xclass: 'Ext.plugin.PullRefresh',
	 *              pullRefreshText: 'Pull to refresh...'
	 *          }, {
	 *              type: 'listpaging',
	 *              autoPaging: true
	 *          }]
	 *      });
	 * 
	 */
	plugins?: any | string | any[] | string[]

	/**
	 * A model instance which updates the Component's html based on it's tpl. Similar to the data
	 * configuration, but tied to to a record to make allow dynamic updates.  This must be a model
	 * instance and not a configuration of one.
	 * 
	 */
	record?: any

	/**
	 * Optional element to render this Component to.
	 * Not required if this component is an item of a Container of a Container.
	 * 
	 */
	renderTo?: any

	/**
	 * The absolute right position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	right?: number | string

	/**
	 * Configuration options to make this Component scrollable. Acceptable values are:
	 * 
	 * - `true` to enable auto scrolling.
	 * - `false` (or `null`) to disable scrolling - this is the default.
	 * - `x` or `horizontal` to enable horizontal scrolling only
	 * - `y` or `vertical` to enable vertical scrolling only
	 * 
	 * Also accepts a configuration object for a `Ext.scroll.Scroller` if
	 * if advanced configuration is needed.
	 * 
	 * The getter for this config returns the Ext.scroll.Scroller
	 * instance.  You can use the Scroller API to read or manipulate the scroll position:
	 * 
	 *     // scrolls the component to 5 on the x axis and 10 on the y axis
	 *     component.getScrollable().scrollTo(5, 10);
	 * 
	 */
	scrollable?: boolean | string | any

	/**
	 * Animation effect to apply when the Component is being shown.  Typically you want to use an
	 * inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation#type config.
	 * 
	 */
	showAnimation?: string | any

	/**
	 * Show an overflow label that will display an overlay when
	 * there are too many events to render in the view. Valid
	 * configurations are:
	 * - `top`
	 * - `bottom`
	 * 
	 * Pass `null` or `''` to not show overflow.
	 * The overflow text may be formatted using cfg-overflowText.
	 * 
	 */
	showOverflow?: string

	/**
	 * A Ext.calendar.store.Calendars instance or
	 * configuration
	 * 
	 */
	store?: any

	/**
	 * Additional CSS styles that will be rendered into an inline style attribute when
	 * the widget is rendered.
	 * 
	 * You can pass either a string syntax:
	 * 
	 *     style: 'background:red'
	 * 
	 * Or by using an object:
	 * 
	 *     style: {
	 *         background: 'red'
	 *     }
	 * 
	 * When using the object syntax, you can define CSS Properties by using a string:
	 * 
	 *     style: {
	 *         'border-left': '1px solid red'
	 *     }
	 * 
	 * Although the object syntax is much easier to read, we suggest you to use the
	 * string syntax for better performance.
	 * 
	 */
	style?: string | any

	/**
	 * DOM tabIndex attribute for this component's focusEl.
	 * 
	 */
	tabIndex?: number

	/**
	 * The timezone offset to display this calendar in. The value should be
	 * specified in the same way as the native Date offset. That is, the number
	 * of minutes between UTC and local time. For example the offset for UTC+10
	 * would be -600 (10 hours * 60 minutes ahead).
	 * 
	 * Defaults to the current browser offset.
	 * 
	 */
	timezoneOffset?: number

	/**
	 * The Ext.tip.ToolTip for this component.
	 * 
	 *     <Button text="Basic Tip">
	 *         <ToolTip>A simple tooltip</ToolTip>
	 *     </Button>
	 * 
	 */
	tooltip?: any

	/**
	 * The absolute top position of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * Explicitly setting this value will make this Component become 'positioned', which means it will no
	 * longer participate in the layout of the Container that it resides in.
	 * 
	 */
	top?: number | string

	/**
	 * 
	 * Emulates the behavior of the CSS [touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)
	 * property in a cross-browser compatible manner.
	 * 
	 * Keys in this object are touch action names, and values are `false` to disable
	 * a touch action or `true` to enable it.  Accepted keys are:
	 * 
	 * - `panX`
	 * - `panY`
	 * - `pinchZoom`
	 * - `doubleTapZoom`
	 * 
	 * All touch actions are enabled (`true`) by default, so it is usually only necessary
	 * to specify which touch actions to disable.  For example, the following disables
	 * only horizontal scrolling and pinch-to-zoom on the component's main element:
	 * 
	 *     touchAction: {
	 *         panX: false,
	 *         pinchZoom: false
	 *     }
	 * 
	 * Touch actions can be specified on reference elements using the reference element
	 * name, for example:
	 * 
	 *     // disables horizontal scrolling on the main element, and double-tap-zoom
	 *     // on the child element named "body"
	 *     touchAction: {
	 *         panY: false
	 *         body: {
	 *             doubleTapZoom: false
	 *         }
	 *     }
	 * 
	 * The primary motivation for setting the touch-action of an element is to prevent
	 * the browser's default handling of a gesture such as pinch-to-zoom, or
	 * drag-to-scroll, so that the application can implement its own handling of that
	 * gesture on the element.  Suppose, for example, a component has a custom drag
	 * handler on its element and wishes to prevent horizontal scrolling of its container
	 * while it is being dragged:
	 * 
	 *     Ext.create('Ext.Widget', {
	 *         touchAction: {
	 *             panX: false
	 *         },
	 *         listeners: {
	 *             drag: function(e) {
	 *                 // implement drag logic
	 *             }
	 *         }
	 *     });
	 * 
	 */
	touchAction?: any

	/**
	 * 
	 * A string, array of strings, or a function that returns JSX.
	 * 
	 *    tpl = data => <div>{data.first_name} {data.last_name}</div>
	 * 
	 * __Note__
	 * The data configuration _must_ be set for any content to be shown in the component when using this configuration.
	 * 
	 */
	tpl?: Function | string | string[]

	/**
	 * The Ext.(X)Template method to use when updating the content area of the Component.
	 * 
	 * Valid modes are:
	 * 
	 * - append
	 * - insertAfter
	 * - insertBefore
	 * - insertFirst
	 * - overwrite
	 * 
	 */
	tplWriteMode?: string

	/**
	 * The ui or uis to be used on this Component
	 * 
	 * When a ui is configured, CSS class names are added to the element, created
	 * by appending the ui name(s) to each classCls and/or baseCls.
	 * 
	 */
	ui?: string | string[]

	/**
	 * One or more CSS classes to add to the component's primary element. This config
	 * is intended solely for use by the component instantiator (the "user"), not by
	 * derived classes.
	 * 
	 * For example:
	 * 
	 *      items: [{
	 *          xtype: 'button',
	 *          userCls: 'my-button'
	 *      ...
	 *      }]
	 * 
	 */
	userCls?: string | string[]

	/**
	 * The start of the date range to show. The visible range of the view will begin
	 * at the firstDayOfWeek immediately preceding this value or the value if
	 * it is the firstDayOfWeek. For example, using the following configuration:
	 * 
	 *      {
	 *          firstDayOfWeek: 0, // Sunday
	 *          value: new Date(2010, 2, 3) // Wed, 3 March 2010
	 *      }
	 * 
	 * The visible range would begin on Sun 28th Feb.
	 * 
	 */
	value?: any

	/**
	 * The number of days to show in a week, starting from the firstDayOfWeek.
	 * For example, to show the view with days `Mon - Fri`, use:
	 * 
	 *      {
	 *          visibleDays: 5,
	 *          firstDayOfWeek: 1 // Monday
	 *      }
	 * 
	 */
	visibleDays?: number

	/**
	 * The number of weeks to show in this view.
	 * 
	 */
	visibleWeeks?: number

	/**
	 * The days of the week that are the weekend. `0` (Sunday) through `6` (Saturday).
	 * Defaults to Ext.Date#weekendDays.
	 * 
	 */
	weekendDays?: number[]

	/**
	 * This value controls this item's order in a Ext.Container#cfg!weighted
	 * Ext.Container (see cfg!parent).
	 * 
	 * Lower values gravitate towards the start of the container - the top in vertical layouts, the
	 * locale start side in horizontal layouts.
	 * 
	 */
	weight?: number

	/**
	 * The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`, `30%`, etc.
	 * By default, if this is not explicitly set, this Component's element will simply have its own natural size.
	 * If set to `auto`, it will set the width to `null` meaning it will have its own natural size.
	 * 
	 */
	width?: number | string

	/**
	 * The z-index to give this Component when it is rendered.
	 * 
	 * Not valid for cfg-floated Components. The Z ordering of cfg-floated
	 * Components is managed by ordering of the DOM elements.
	 * 
	 */
	zIndex?: number

	/**
	 * Fires after a Component had been added to a Container.
	 * 
	 */
	onAdded?: (me: any, container: any, index: number) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBeforeBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onBeforeCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onBeforeDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onBeforeDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fired before an event addForm is shown.
	 * 
	 */
	onBeforeEventAdd?: (me: any, context: any) => void

	/**
	 * Fired before an event drag begins. Depends on the cfg-draggable config.
	 * 
	 */
	onBeforeEventDragStart?: (me: any, context: any) => void

	/**
	 * Fired before an event editForm is shown.
	 * 
	 */
	onBeforeEventEdit?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onBeforeHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onBeforeHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires before the Component is hidden. Hide may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeHide?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onBeforeLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onBeforeMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onBeforeMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onBeforeMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onBeforeMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onBeforeRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onBeforeScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fires before the Component is shown. Show may be vetoed by returning `false` from a handler.
	 * 
	 */
	onBeforeShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onBeforeTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onBeforeWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when this Component's focusEl loses focus.
	 * 
	 */
	onBlur?: (me: any, event: any) => void

	/**
	 * This event fires when `cfg!bottom` changes.
	 */
	onBottomChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!centered` changes.
	 */
	onCenteredChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires when the component is destroyed
	 * 
	 */
	onDestroy?: () => void

	/**
	 * This event fires when `cfg!disabled` changes.
	 */
	onDisabledChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * This event fires when `cfg!docked` changes.
	 */
	onDockedChange?: (sender: any, value: string, oldValue: string) => void

	/**
	 * Fires when the component is no longer displayed in the DOM.  Listening to this event will
	 * degrade performance not recommend for general use.
	 * 
	 */
	onErased?: (me: any) => void

	/**
	 * Fired when an event has been added via the addForm.
	 * 
	 */
	onEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event drop is complete.
	 * Depends on the droppable config.
	 * 
	 */
	onEventDrop?: (me: any, context: any) => void

	/**
	 * Fired when an event has been edited via the editForm.
	 * 
	 */
	onEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when an event is tapped.
	 * 
	 */
	onEventTap?: (me: any, context: any) => void

	/**
	 * Fires when this Component's focusEl receives focus.
	 * 
	 */
	onFocus?: (me: any, event: any) => void

	/**
	 * Fires when focus enters this Component's hierarchy.
	 * 
	 */
	onFocusEnter?: (me: any, event: any) => void

	/**
	 * Fires when focus leaves this Component's hierarchy.
	 * 
	 */
	onFocusLeave?: (me: any, event: any) => void

	/**
	 * Fires whenever a Component with the fullscreen config is instantiated
	 * 
	 */
	onFullscreen?: (me: any) => void

	/**
	 * This event fires when `cfg!height` changes.
	 */
	onHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!hidden` changes.
	 */
	onHiddenChange?: (sender: any, value: boolean, oldValue: boolean) => void

	/**
	 * Fires whenever the Component is hidden
	 * 
	 */
	onHide?: (me: any) => void

	/**
	 * Fires when the component has been initialized
	 * 
	 */
	onInitialize?: (me: any) => void

	/**
	 * This event fires when `cfg!left` changes.
	 */
	onLeftChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxHeight` changes.
	 */
	onMaxHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!maxWidth` changes.
	 */
	onMaxWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minHeight` changes.
	 */
	onMinHeightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!minWidth` changes.
	 */
	onMinWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fires when a component si moved within its Container.
	 * 
	 */
	onMoved?: (me: any, container: any, toIndex: number, fromIndex: number) => void

	/**
	 * Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to
	 * perform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.
	 * 
	 * __Note:__ This event is not available to be used with event delegation. Instead `painted` only fires if you explicitly
	 * add at least one listener to it, for performance reasons.
	 * 
	 */
	onPainted?: (element: any) => void

	/**
	 * Fires whenever there is a change in the positioned status of a component
	 * 
	 */
	onPositionedChange?: (me: any, positioned: boolean) => void

	/**
	 * Fires when a component is removed from a Container
	 * 
	 */
	onRemoved?: (me: any, container: any, index: number) => void

	/**
	 * Fires *asynchronously* after a browser layout caused by a component resize. This may be triggered for any or
	 * several of the following reasons:
	 *    - Programmatic changes to cfg-width or cfg-height configs.
	 *    - Setting the cfg-flex config when the owning layout is Ext.layout.Box.
	 *    - Setting cfg-minHeight, cfg-maxHeight, cfg-minWidth or cfg-maxWidth.
	 *    - Changing device orientation.
	 *    - Changing the browser viewport size.
	 *    - Any resize caused by browser layout recalculation which may be caused by content size changes
	 *      or application of default browser layout rules.
	 * 
	 */
	onResize?: (component: any, width: string | number, height: string | number, oldWidth: string | number, oldHeight: string | number) => void

	/**
	 * This event fires when `cfg!right` changes.
	 */
	onRightChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * This event fires when `cfg!scrollable` changes.
	 */
	onScrollableChange?: (sender: any, value: boolean | string | any, oldValue: boolean | string | any) => void

	/**
	 * Fired when a single date is selected.
	 * 
	 */
	onSelect?: (me: any, context: any) => void

	/**
	 * Fired when a date range is selected.
	 * 
	 */
	onSelectRange?: (me: any, context: any) => void

	/**
	 * Fires whenever the Component is shown
	 * 
	 */
	onShow?: (me: any) => void

	/**
	 * This event fires when `cfg!top` changes.
	 */
	onTopChange?: (sender: any, value: number | string, oldValue: number | string) => void

	/**
	 * Fired after the addForm has been completed, but before the event
	 * is added. Allows the add to be validated.
	 * 
	 */
	onValiDateEventAdd?: (me: any, context: any) => void

	/**
	 * Fired when an event is dropped on this view, allows the drop
	 * to be validated. Depends on the droppable config.
	 * 
	 */
	onValiDateEventDrop?: (me: any, context: any) => void

	/**
	 * Fired after the editForm has been completed, but before the event
	 * is saved. Allows the edit to be validated.
	 * 
	 */
	onValiDateEventEdit?: (me: any, context: any) => void

	/**
	 * Fired when the cfg-value changes.
	 * 
	 */
	onValueChange?: (me: any, context: any) => void

	/**
	 * This event fires when `cfg!width` changes.
	 */
	onWidthChange?: (sender: any, value: number | string, oldValue: number | string) => void
}